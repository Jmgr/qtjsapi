<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src"
xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0"
language="C++"
filename="/Users/andrew/opt/Qt/6.6.1/macos/lib/QtQml.framework/Versions/A/Headers/qqmlengine.h">

  <comment type="line">// Copyright (C) 2016 The Qt Company
  Ltd.</comment>
  <comment type="line">// SPDX-License-Identifier:
  LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR
  GPL-3.0-only</comment>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>QQMLENGINE_H</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <cpp:macro>
    <name>QQMLENGINE_H</name>
  </cpp:macro></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QtCore/qurl.h&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QtCore/qobject.h&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QtCore/qmap.h&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QtQml/qjsengine.h&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QtQml/qqml.h&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QtQml/qqmlerror.h&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>
  &lt;QtQml/qqmlabstracturlinterceptor.h&gt;</cpp:file></cpp:include>
  <macro>
    <name>QT_BEGIN_NAMESPACE</name>
  </macro>
  <class>class 
  <macro>
    <name>Q_QML_EXPORT</name>
  </macro>
  <name>QQmlImageProviderBase</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QObject</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_OBJECT</name>
    </macro>
  </private>
  <public>public: 
  <enum>enum 
  <name>ImageType</name>: 
  <type>
    <name>int</name>
  </type>
  <block>{ 
  <decl>
    <name>Invalid</name>
    <init>= 
    <expr>
      <literal type="number">0</literal>
    </expr></init>
  </decl>, 
  <decl>
    <name>Image</name>
  </decl>, 
  <decl>
    <name>Pixmap</name>
  </decl>, 
  <decl>
    <name>Texture</name>
  </decl>, 
  <decl>
    <name>ImageResponse</name>
  </decl>, }</block>;</enum>
  <enum>enum 
  <name>Flag</name>
  <block>{ 
  <decl>
    <name>ForceAsynchronousImageLoading</name>
    <init>= 
    <expr>
      <literal type="number">0x01</literal>
    </expr></init>
  </decl>}</block>;</enum>
  <macro>
    <name>Q_DECLARE_FLAGS</name>
    <argument_list>(
    <argument>Flags</argument>, 
    <argument>Flag</argument>)</argument_list>
  </macro>
  <destructor_decl>
  <specifier>virtual</specifier>
  <name>~QQmlImageProviderBase</name>
  <parameter_list>()</parameter_list>;</destructor_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>ImageType</name>
  </type>
  <name>imageType</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>= 
  <literal type="number">0</literal>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>Flags</name>
  </type>
  <name>flags</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>= 
  <literal type="number">0</literal>;</function_decl></public>
  <private>private: 
  <friend>friend 
  <class_decl>class 
  <name>QQuickImageProvider</name>;</class_decl></friend>
  <macro>
    <name>QQmlImageProviderBase</name>
    <argument_list>()</argument_list>
  </macro>
  <empty_stmt>;</empty_stmt></private>}</block>;</class>
  <macro>
    <name>Q_DECLARE_OPERATORS_FOR_FLAGS</name>
    <argument_list>(
    <argument>
    QQmlImageProviderBase::Flags</argument>)</argument_list>
  </macro>
  <class_decl>class 
  <name>QQmlComponent</name>;</class_decl>
  <class_decl>class 
  <name>QQmlEnginePrivate</name>;</class_decl>
  <class_decl>class 
  <name>QQmlExpression</name>;</class_decl>
  <class_decl>class 
  <name>QQmlContext</name>;</class_decl>
  <class_decl>class 
  <name>QQmlType</name>;</class_decl>
  <class_decl>class 
  <name>QUrl</name>;</class_decl>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_CONFIG</name>
      <argument_list>(
      <argument>
        <expr>
          <name>qml_network</name>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <class_decl>class 
  <name>QNetworkAccessManager</name>;</class_decl>
  <class_decl>class 
  <name>QQmlNetworkAccessManagerFactory</name>;</class_decl>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <class_decl>class 
  <name>QQmlIncubationController</name>;</class_decl>
  <class>class 
  <macro>
    <name>Q_QML_EXPORT</name>
  </macro>
  <name>QQmlEngine</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QJSEngine</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_PROPERTY</name>
      <argument_list>(
      <argument>QString offlineStoragePath READ offlineStoragePath
      WRITE setOfflineStoragePath NOTIFY
      offlineStoragePathChanged</argument>)</argument_list>
    </macro>
    <macro>
      <name>Q_OBJECT</name>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <specifier>explicit</specifier>
  <name>QQmlEngine</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>QObject</name>
        <modifier>*</modifier>
      </type>
      <name>p</name>
      <init>= 
      <expr>
        <literal type="null">nullptr</literal>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <destructor_decl>
  <name>~QQmlEngine</name>
  <parameter_list>()</parameter_list>
  <specifier>override</specifier>;</destructor_decl>
  <function_decl>
  <type>
    <name>QQmlContext</name>
    <modifier>*</modifier>
  </type>
  <name>rootContext</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>clearComponentCache</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>trimComponentCache</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>clearSingletons</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QStringList</name>
  </type>
  <name>importPathList</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setImportPathList</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QStringList</name>
        <modifier>&amp;</modifier>
      </type>
      <name>paths</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>addImportPath</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QString</name>
        <modifier>&amp;</modifier>
      </type>
      <name>dir</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QStringList</name>
  </type>
  <name>pluginPathList</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setPluginPathList</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QStringList</name>
        <modifier>&amp;</modifier>
      </type>
      <name>paths</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>addPluginPath</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QString</name>
        <modifier>&amp;</modifier>
      </type>
      <name>dir</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_DEPRECATED_SINCE</name>
      <argument_list>(
      <argument>
        <expr>
          <literal type="number">6</literal>
          <operator>,</operator>
          <literal type="number">0</literal>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <function>
    <type>
      <name>QT_DEPRECATED</name>
      <name>bool</name>
    </type>
    <name>addNamedBundle</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <specifier>const</specifier>
          <name>QString</name>
          <modifier>&amp;</modifier>
        </type>
      </decl>
    </parameter>, 
    <parameter>
      <decl>
        <type>
          <specifier>const</specifier>
          <name>QString</name>
          <modifier>&amp;</modifier>
        </type>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <literal type="boolean">false</literal>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_CONFIG</name>
      <argument_list>(
      <argument>
        <expr>
          <name>library</name>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_DEPRECATED_SINCE</name>
      <argument_list>(
      <argument>
        <expr>
          <literal type="number">6</literal>
          <operator>,</operator>
          <literal type="number">4</literal>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_4</name>
    <argument_list>(
    <argument>
      <literal type="string">"Import the module from QML
      instead"</literal>
    </argument>)</argument_list>
  </macro>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>importPlugin</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QString</name>
        <modifier>&amp;</modifier>
      </type>
      <name>filePath</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QString</name>
        <modifier>&amp;</modifier>
      </type>
      <name>uri</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>QList</name>
          <argument_list type="generic">&lt;
          <argument>
            <expr>
              <name>QQmlError</name>
            </expr>
          </argument>&gt;</argument_list>
        </name>
        <modifier>*</modifier>
      </type>
      <name>errors</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_CONFIG</name>
      <argument_list>(
      <argument>
        <expr>
          <name>qml_network</name>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setNetworkAccessManagerFactory</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>QQmlNetworkAccessManagerFactory</name>
        <modifier>*</modifier>
      </type>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QQmlNetworkAccessManagerFactory</name>
    <modifier>*</modifier>
  </type>
  <name>networkAccessManagerFactory</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QNetworkAccessManager</name>
    <modifier>*</modifier>
  </type>
  <name>networkAccessManager</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_DEPRECATED_SINCE</name>
      <argument_list>(
      <argument>
        <expr>
          <literal type="number">6</literal>
          <operator>,</operator>
          <literal type="number">0</literal>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <function>
    <type>
      <name>QT_DEPRECATED</name>
      <name>void</name>
    </type>
    <name>setUrlInterceptor</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <name>QQmlAbstractUrlInterceptor</name>
          <modifier>*</modifier>
        </type>
        <name>urlInterceptor</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <expr_stmt>
      <expr>
        <call>
          <name>addUrlInterceptor</name>
          <argument_list>(
          <argument>
            <expr>
              <name>urlInterceptor</name>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</expr_stmt>
    </block_content>}</block>
  </function>
  <function_decl>
  <type>
    <name>QT_DEPRECATED</name>
    <name>QQmlAbstractUrlInterceptor</name>
    <modifier>*</modifier>
  </type>
  <name>urlInterceptor</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>addUrlInterceptor</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>QQmlAbstractUrlInterceptor</name>
        <modifier>*</modifier>
      </type>
      <name>urlInterceptor</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>removeUrlInterceptor</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>QQmlAbstractUrlInterceptor</name>
        <modifier>*</modifier>
      </type>
      <name>urlInterceptor</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>
      <name>QList</name>
      <argument_list type="generic">&lt;
      <argument>
        <expr>
          <name>QQmlAbstractUrlInterceptor</name>
          <modifier>*</modifier>
        </expr>
      </argument>&gt;</argument_list>
    </name>
  </type>
  <name>urlInterceptors</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QUrl</name>
  </type>
  <name>interceptUrl</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QUrl</name>
        <modifier>&amp;</modifier>
      </type>
      <name>url</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>QQmlAbstractUrlInterceptor</name>
          <operator>::</operator>
          <name>DataType</name>
        </name>
      </type>
      <name>type</name>
    </decl>
  </parameter>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>addImageProvider</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QString</name>
        <modifier>&amp;</modifier>
      </type>
      <name>id</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>QQmlImageProviderBase</name>
        <modifier>*</modifier>
      </type>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QQmlImageProviderBase</name>
    <modifier>*</modifier>
  </type>
  <name>imageProvider</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QString</name>
        <modifier>&amp;</modifier>
      </type>
      <name>id</name>
    </decl>
  </parameter>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>removeImageProvider</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QString</name>
        <modifier>&amp;</modifier>
      </type>
      <name>id</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setIncubationController</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>QQmlIncubationController</name>
        <modifier>*</modifier>
      </type>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QQmlIncubationController</name>
    <modifier>*</modifier>
  </type>
  <name>incubationController</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setOfflineStoragePath</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QString</name>
        <modifier>&amp;</modifier>
      </type>
      <name>dir</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QString</name>
  </type>
  <name>offlineStoragePath</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QString</name>
  </type>
  <name>offlineStorageDatabaseFilePath</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QString</name>
        <modifier>&amp;</modifier>
      </type>
      <name>databaseName</name>
    </decl>
  </parameter>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QUrl</name>
  </type>
  <name>baseUrl</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setBaseUrl</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QUrl</name>
        <modifier>&amp;</modifier>
      </type>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>outputWarningsToStandardError</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setOutputWarningsToStandardError</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>bool</name>
      </type>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>markCurrentFunctionAsTranslationBinding</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <template>template
  <parameter_list>&lt;
  <parameter>
    <type>
      <name>typename</name>
    </type>
    <name>T</name>
  </parameter>&gt;</parameter_list></template>
  <type>
    <name>T</name>
  </type>
  <name>singletonInstance</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>qmlTypeId</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <template>template
  <parameter_list>&lt;
  <parameter>
    <type>
      <name>typename</name>
    </type>
    <name>T</name>
  </parameter>&gt;</parameter_list></template>
  <type>
    <name>T</name>
  </type>
  <name>singletonInstance</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>QAnyStringView</name>
      </type>
      <name>moduleName</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>QAnyStringView</name>
      </type>
      <name>typeName</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>captureProperty</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>QObject</name>
        <modifier>*</modifier>
      </type>
      <name>object</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QMetaProperty</name>
        <modifier>&amp;</modifier>
      </type>
      <name>property</name>
    </decl>
  </parameter>)</parameter_list>
  <specifier>const</specifier>;</function_decl></public>
  <public>public 
  <name>Q_SLOTS</name>: 
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>retranslate</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <label>
  <name>Q_SIGNALS</name>:</label>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>offlineStoragePathChanged</name>
  <parameter_list>()</parameter_list>;</function_decl></public>
  <public>public: 
  <function_decl>
  <type>
    <specifier>static</specifier>
    <name>QQmlContext</name>
    <modifier>*</modifier>
  </type>
  <name>contextForObject</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QObject</name>
        <modifier>*</modifier>
      </type>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <specifier>static</specifier>
    <name>void</name>
  </type>
  <name>setContextForObject</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>QObject</name>
        <modifier>*</modifier>
      </type>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>QQmlContext</name>
        <modifier>*</modifier>
      </type>
    </decl>
  </parameter>)</parameter_list>;</function_decl></public>
  <protected>protected: 
  <constructor_decl>
  <name>QQmlEngine</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>QQmlEnginePrivate</name>
        <modifier>&amp;</modifier>
      </type>
      <name>dd</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>QObject</name>
        <modifier>*</modifier>
      </type>
      <name>p</name>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>event</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>QEvent</name>
        <modifier>*</modifier>
      </type>
    </decl>
  </parameter>)</parameter_list>
  <specifier>override</specifier>;</function_decl>
  <label>
  <name>Q_SIGNALS</name>:</label>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>quit</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>exit</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>retCode</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>warnings</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>
          <name>QList</name>
          <argument_list type="generic">&lt;
          <argument>
            <expr>
              <name>QQmlError</name>
            </expr>
          </argument>&gt;</argument_list>
        </name>
        <modifier>&amp;</modifier>
      </type>
      <name>warnings</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl></protected>
  <private>private: 
  <macro>
    <name>Q_DISABLE_COPY</name>
    <argument_list>(
    <argument>QQmlEngine</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_PRIVATE</name>
    <argument_list>(
    <argument>QQmlEngine</argument>)</argument_list>
  </macro></private>}</block>;</class>
  <function_decl>
  <template>template
  <parameter_list>&lt;&gt;</parameter_list></template>
  <type>
    <name>Q_QML_EXPORT</name>
    <name>QJSValue</name>
  </type>
  <name>
    <name>QQmlEngine</name>
    <operator>::</operator>
    <name>singletonInstance</name>
    <argument_list type="generic">&lt;
    <argument>
      <expr>
        <name>QJSValue</name>
      </expr>
    </argument>&gt;</argument_list>
  </name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>qmlTypeId</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function>
    <template>template
    <parameter_list>&lt;
    <parameter>
      <type>
        <name>typename</name>
      </type>
      <name>T</name>
    </parameter>&gt;</parameter_list></template>
    <type>
      <name>T</name>
    </type>
    <name>
      <name>QQmlEngine</name>
      <operator>::</operator>
      <name>singletonInstance</name>
    </name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <name>int</name>
        </type>
        <name>qmlTypeId</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>
            <name>qobject_cast</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>T</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
          <argument_list>(
          <argument>
            <expr>
              <call>
                <name>
                  <name>singletonInstance</name>
                  <argument_list type="generic">&lt;
                  <argument>
                    <expr>
                      <name>QJSValue</name>
                    </expr>
                  </argument>&gt;</argument_list>
                </name>
                <argument_list>(
                <argument>
                  <expr>
                    <name>qmlTypeId</name>
                  </expr>
                </argument>)</argument_list>
              </call>
              <operator>.</operator>
              <call>
                <name>toQObject</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function_decl>
  <template>template
  <parameter_list>&lt;&gt;</parameter_list></template>
  <type>
    <name>Q_QML_EXPORT</name>
    <name>QJSValue</name>
  </type>
  <name>
    <name>QQmlEngine</name>
    <operator>::</operator>
    <name>singletonInstance</name>
    <argument_list type="generic">&lt;
    <argument>
      <expr>
        <name>QJSValue</name>
      </expr>
    </argument>&gt;</argument_list>
  </name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>QAnyStringView</name>
      </type>
      <name>uri</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>QAnyStringView</name>
      </type>
      <name>typeName</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function>
    <template>template
    <parameter_list>&lt;
    <parameter>
      <type>
        <name>typename</name>
      </type>
      <name>T</name>
    </parameter>&gt;</parameter_list></template>
    <type>
      <name>T</name>
    </type>
    <name>
      <name>QQmlEngine</name>
      <operator>::</operator>
      <name>singletonInstance</name>
    </name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <name>QAnyStringView</name>
        </type>
        <name>uri</name>
      </decl>
    </parameter>, 
    <parameter>
      <decl>
        <type>
          <name>QAnyStringView</name>
        </type>
        <name>typeName</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>
            <name>qobject_cast</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>T</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
          <argument_list>(
          <argument>
            <expr>
              <call>
                <name>
                  <name>singletonInstance</name>
                  <argument_list type="generic">&lt;
                  <argument>
                    <expr>
                      <name>QJSValue</name>
                    </expr>
                  </argument>&gt;</argument_list>
                </name>
                <argument_list>(
                <argument>
                  <expr>
                    <name>uri</name>
                  </expr>
                </argument>, 
                <argument>
                  <expr>
                    <name>typeName</name>
                  </expr>
                </argument>)</argument_list>
              </call>
              <operator>.</operator>
              <call>
                <name>toQObject</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <expr>
    <name>QT_END_NAMESPACE</name>
  </expr>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="line">// QQMLENGINE_H</comment>
</unit>
