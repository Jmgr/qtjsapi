<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src"
xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0"
language="C++"
filename="/Users/andrew/opt/Qt/6.6.1/macos/lib/QtQml.framework/Versions/A/Headers/qjsengine.h">

  <comment type="line">// Copyright (C) 2016 The Qt Company
  Ltd.</comment>
  <comment type="line">// SPDX-License-Identifier:
  LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR
  GPL-3.0-only</comment>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>QJSENGINE_H</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <cpp:macro>
    <name>QJSENGINE_H</name>
  </cpp:macro></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QtCore/qmetatype.h&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QtCore/qvariant.h&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>
  &lt;QtCore/qsharedpointer.h&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QtCore/qobject.h&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QtCore/qtimezone.h&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QtQml/qjsvalue.h&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>
  &lt;QtQml/qjsmanagedvalue.h&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QtQml/qqmldebug.h&gt;</cpp:file></cpp:include>
  <function_decl>
  <type>
  <name>QT_BEGIN_NAMESPACE</name>
  <specifier>template</specifier>
  <name />&lt;
  <name>
    <typename>typename</typename>
    <name>T</name>
  </name>&gt; 
  <specifier>inline</specifier></type>
  <name>T</name>
  <name>qjsvalue_cast</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QJSValue</name>
        <modifier>&amp;</modifier>
      </type>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <class_decl>class 
  <name>QJSEnginePrivate</name>;</class_decl>
  <class>class 
  <macro>
    <name>Q_QML_EXPORT</name>
  </macro>
  <name>QJSEngine</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QObject</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_OBJECT</name>
    </macro>
    <macro>
      <name>Q_PROPERTY</name>
      <argument_list>(
      <argument>QString uiLanguage READ uiLanguage WRITE
      setUiLanguage NOTIFY
      uiLanguageChanged</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <name>QJSEngine</name>
  <parameter_list>()</parameter_list>;</constructor_decl>
  <constructor_decl>
  <specifier>explicit</specifier>
  <name>QJSEngine</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>QObject</name>
        <modifier>*</modifier>
      </type>
      <name>parent</name>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <destructor_decl>
  <name>~QJSEngine</name>
  <parameter_list>()</parameter_list>
  <specifier>override</specifier>;</destructor_decl>
  <function_decl>
  <type>
    <name>QJSValue</name>
  </type>
  <name>globalObject</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QJSValue</name>
  </type>
  <name>evaluate</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QString</name>
        <modifier>&amp;</modifier>
      </type>
      <name>program</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QString</name>
        <modifier>&amp;</modifier>
      </type>
      <name>fileName</name>
      <init>= 
      <expr>
        <call>
          <name>QString</name>
          <argument_list>()</argument_list>
        </call>
      </expr></init>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>lineNumber</name>
      <init>= 
      <expr>
        <literal type="number">1</literal>
      </expr></init>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>QStringList</name>
        <modifier>*</modifier>
      </type>
      <name>exceptionStackTrace</name>
      <init>= 
      <expr>
        <literal type="null">nullptr</literal>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QJSValue</name>
  </type>
  <name>importModule</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QString</name>
        <modifier>&amp;</modifier>
      </type>
      <name>fileName</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>registerModule</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QString</name>
        <modifier>&amp;</modifier>
      </type>
      <name>moduleName</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QJSValue</name>
        <modifier>&amp;</modifier>
      </type>
      <name>value</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QJSValue</name>
  </type>
  <name>newObject</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QJSValue</name>
  </type>
  <name>newSymbol</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QString</name>
        <modifier>&amp;</modifier>
      </type>
      <name>name</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QJSValue</name>
  </type>
  <name>newArray</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>uint</name>
      </type>
      <name>length</name>
      <init>= 
      <expr>
        <literal type="number">0</literal>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QJSValue</name>
  </type>
  <name>newQObject</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>QObject</name>
        <modifier>*</modifier>
      </type>
      <name>object</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QJSValue</name>
  </type>
  <name>newQMetaObject</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QMetaObject</name>
        <modifier>*</modifier>
      </type>
      <name>metaObject</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function>
    <template>template 
    <parameter_list>&lt;
    <parameter>
      <type>
        <name>typename</name>
      </type>
      <name>T</name>
    </parameter>&gt;</parameter_list></template>
    <type>
      <name>QJSValue</name>
    </type>
    <name>newQMetaObject</name>
    <parameter_list>()</parameter_list>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>newQMetaObject</name>
          <argument_list>(
          <argument>
            <expr>
              <operator>&amp;</operator>
              <name>
                <name>T</name>
                <operator>::</operator>
                <name>staticMetaObject</name>
              </name>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function_decl>
  <type>
    <name>QJSValue</name>
  </type>
  <name>newErrorObject</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>
          <name>QJSValue</name>
          <operator>::</operator>
          <name>ErrorType</name>
        </name>
      </type>
      <name>errorType</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QString</name>
        <modifier>&amp;</modifier>
      </type>
      <name>message</name>
      <init>= 
      <expr>
        <call>
          <name>QString</name>
          <argument_list>()</argument_list>
        </call>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function>
    <template>template 
    <parameter_list>&lt;
    <parameter>
      <type>
        <name>typename</name>
      </type>
      <name>T</name>
    </parameter>&gt;</parameter_list></template>
    <type>
      <specifier>inline</specifier>
      <name>QJSValue</name>
    </type>
    <name>toScriptValue</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <specifier>const</specifier>
          <name>T</name>
          <modifier>&amp;</modifier>
        </type>
        <name>value</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>create</name>
          <argument_list>(
          <argument>
            <expr>
              <call>
                <name>
                  <name>QMetaType</name>
                  <operator>::</operator>
                  <name>fromType</name>
                  <argument_list type="generic">&lt;
                  <argument>
                    <expr>
                      <name>T</name>
                    </expr>
                  </argument>&gt;</argument_list>
                </name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </argument>, 
          <argument>
            <expr>
              <operator>&amp;</operator>
              <name>value</name>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <template>template 
    <parameter_list>&lt;
    <parameter>
      <type>
        <name>typename</name>
      </type>
      <name>T</name>
    </parameter>&gt;</parameter_list></template>
    <type>
      <specifier>inline</specifier>
      <name>QJSManagedValue</name>
    </type>
    <name>toManagedValue</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <specifier>const</specifier>
          <name>T</name>
          <modifier>&amp;</modifier>
        </type>
        <name>value</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>createManaged</name>
          <argument_list>(
          <argument>
            <expr>
              <call>
                <name>
                  <name>QMetaType</name>
                  <operator>::</operator>
                  <name>fromType</name>
                  <argument_list type="generic">&lt;
                  <argument>
                    <expr>
                      <name>T</name>
                    </expr>
                  </argument>&gt;</argument_list>
                </name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </argument>, 
          <argument>
            <expr>
              <operator>&amp;</operator>
              <name>value</name>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <template>template 
    <parameter_list>&lt;
    <parameter>
      <type>
        <name>typename</name>
      </type>
      <name>T</name>
    </parameter>&gt;</parameter_list></template>
    <type>
      <specifier>inline</specifier>
      <name>QJSPrimitiveValue</name>
    </type>
    <name>toPrimitiveValue</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <specifier>const</specifier>
          <name>T</name>
          <modifier>&amp;</modifier>
        </type>
        <name>value</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <comment type="line">// In the common case that the argument
      fits into QJSPrimitiveValue, use it.</comment>
      <if_stmt>
        <if>if 
        <specifier>constexpr</specifier>
        <condition>(
        <expr>
          <name>
            <name>std</name>
            <operator>::</operator>
            <name>disjunction_v</name>
            <argument_list type="generic">&lt; 
            <argument>
              <expr>
                <name>
                  <name>std</name>
                  <operator>::</operator>
                  <name>is_same</name>
                  <argument_list type="generic">&lt;
                  <argument>
                    <expr>
                      <name>T</name>
                    </expr>
                  </argument>, 
                  <argument>
                    <expr>
                      <name>int</name>
                    </expr>
                  </argument>&gt;</argument_list>
                </name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>
                  <name>std</name>
                  <operator>::</operator>
                  <name>is_same</name>
                  <argument_list type="generic">&lt;
                  <argument>
                    <expr>
                      <name>T</name>
                    </expr>
                  </argument>, 
                  <argument>
                    <expr>
                      <name>bool</name>
                    </expr>
                  </argument>&gt;</argument_list>
                </name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>
                  <name>std</name>
                  <operator>::</operator>
                  <name>is_same</name>
                  <argument_list type="generic">&lt;
                  <argument>
                    <expr>
                      <name>T</name>
                    </expr>
                  </argument>, 
                  <argument>
                    <expr>
                      <name>double</name>
                    </expr>
                  </argument>&gt;</argument_list>
                </name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>
                  <name>std</name>
                  <operator>::</operator>
                  <name>is_same</name>
                  <argument_list type="generic">&lt;
                  <argument>
                    <expr>
                      <name>T</name>
                    </expr>
                  </argument>, 
                  <argument>
                    <expr>
                      <name>QString</name>
                    </expr>
                  </argument>&gt;</argument_list>
                </name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>)</condition>
        <block>{
        <block_content>
          <return>return 
          <expr>
            <call>
              <name>QJSPrimitiveValue</name>
              <argument_list>(
              <argument>
                <expr>
                  <name>value</name>
                </expr>
              </argument>)</argument_list>
            </call>
          </expr>;</return>
        </block_content>}</block></if>
        <else>else 
        <block>{
        <block_content>
          <return>return 
          <expr>
            <call>
              <name>createPrimitive</name>
              <argument_list>(
              <argument>
                <expr>
                  <call>
                    <name>
                      <name>QMetaType</name>
                      <operator>::</operator>
                      <name>fromType</name>
                      <argument_list type="generic">&lt;
                      <argument>
                        <expr>
                          <name>T</name>
                        </expr>
                      </argument>&gt;</argument_list>
                    </name>
                    <argument_list>()</argument_list>
                  </call>
                </expr>
              </argument>, 
              <argument>
                <expr>
                  <operator>&amp;</operator>
                  <name>value</name>
                </expr>
              </argument>)</argument_list>
            </call>
          </expr>;</return>
        </block_content>}</block></else>
      </if_stmt>
    </block_content>}</block>
  </function>
  <function>
    <template>template 
    <parameter_list>&lt;
    <parameter>
      <type>
        <name>typename</name>
      </type>
      <name>T</name>
    </parameter>&gt;</parameter_list></template>
    <type>
      <specifier>inline</specifier>
      <name>T</name>
    </type>
    <name>fromScriptValue</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <specifier>const</specifier>
          <name>QJSValue</name>
          <modifier>&amp;</modifier>
        </type>
        <name>value</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>
            <name>qjsvalue_cast</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>T</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
          <argument_list>(
          <argument>
            <expr>
              <name>value</name>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <template>template 
    <parameter_list>&lt;
    <parameter>
      <type>
        <name>typename</name>
      </type>
      <name>T</name>
    </parameter>&gt;</parameter_list></template>
    <type>
      <specifier>inline</specifier>
      <name>T</name>
    </type>
    <name>fromManagedValue</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <specifier>const</specifier>
          <name>QJSManagedValue</name>
          <modifier>&amp;</modifier>
        </type>
        <name>value</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>
            <name>qjsvalue_cast</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>T</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
          <argument_list>(
          <argument>
            <expr>
              <name>value</name>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <template>template 
    <parameter_list>&lt;
    <parameter>
      <type>
        <name>typename</name>
      </type>
      <name>T</name>
    </parameter>&gt;</parameter_list></template>
    <type>
      <specifier>inline</specifier>
      <name>T</name>
    </type>
    <name>fromPrimitiveValue</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <specifier>const</specifier>
          <name>QJSPrimitiveValue</name>
          <modifier>&amp;</modifier>
        </type>
        <name>value</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <if_stmt>
        <if>if 
        <specifier>constexpr</specifier>
        <condition>(
        <expr>
          <name>
            <name>std</name>
            <operator>::</operator>
            <name>is_same_v</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>T</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>int</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>)</condition>
        <block type="pseudo">
          <block_content>
            <return>return 
            <expr>
              <call>
                <name>
                  <name>value</name>
                  <operator>.</operator>
                  <name>toInteger</name>
                </name>
                <argument_list>()</argument_list>
              </call>
            </expr>;</return>
          </block_content>
        </block></if>
      </if_stmt>
      <if_stmt>
        <if>if 
        <specifier>constexpr</specifier>
        <condition>(
        <expr>
          <name>
            <name>std</name>
            <operator>::</operator>
            <name>is_same_v</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>T</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>bool</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>)</condition>
        <block type="pseudo">
          <block_content>
            <return>return 
            <expr>
              <call>
                <name>
                  <name>value</name>
                  <operator>.</operator>
                  <name>toBoolean</name>
                </name>
                <argument_list>()</argument_list>
              </call>
            </expr>;</return>
          </block_content>
        </block></if>
      </if_stmt>
      <if_stmt>
        <if>if 
        <specifier>constexpr</specifier>
        <condition>(
        <expr>
          <name>
            <name>std</name>
            <operator>::</operator>
            <name>is_same_v</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>T</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>double</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>)</condition>
        <block type="pseudo">
          <block_content>
            <return>return 
            <expr>
              <call>
                <name>
                  <name>value</name>
                  <operator>.</operator>
                  <name>toDouble</name>
                </name>
                <argument_list>()</argument_list>
              </call>
            </expr>;</return>
          </block_content>
        </block></if>
      </if_stmt>
      <if_stmt>
        <if>if 
        <specifier>constexpr</specifier>
        <condition>(
        <expr>
          <name>
            <name>std</name>
            <operator>::</operator>
            <name>is_same_v</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>T</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>QString</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>)</condition>
        <block type="pseudo">
          <block_content>
            <return>return 
            <expr>
              <call>
                <name>
                  <name>value</name>
                  <operator>.</operator>
                  <name>toString</name>
                </name>
                <argument_list>()</argument_list>
              </call>
            </expr>;</return>
          </block_content>
        </block></if>
      </if_stmt>
      <if_stmt>
        <if>if 
        <specifier>constexpr</specifier>
        <condition>(
        <expr>
          <name>
            <name>std</name>
            <operator>::</operator>
            <name>is_same_v</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>T</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>QVariant</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>)</condition>
        <block type="pseudo">
          <block_content>
            <return>return 
            <expr>
              <call>
                <name>
                  <name>value</name>
                  <operator>.</operator>
                  <name>toVariant</name>
                </name>
                <argument_list>()</argument_list>
              </call>
            </expr>;</return>
          </block_content>
        </block></if>
      </if_stmt>
      <if_stmt>
        <if>if 
        <specifier>constexpr</specifier>
        <condition>(
        <expr>
          <name>
            <name>std</name>
            <operator>::</operator>
            <name>is_pointer_v</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>T</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>)</condition>
        <block type="pseudo">
          <block_content>
            <return>return 
            <expr>
              <literal type="null">nullptr</literal>
            </expr>;</return>
          </block_content>
        </block></if>
      </if_stmt>
      <return>return 
      <expr>
        <call>
          <name>
            <name>qjsvalue_cast</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>T</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
          <argument_list>(
          <argument>
            <expr>
              <name>value</name>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <template>template 
    <parameter_list>&lt;
    <parameter>
      <type>
        <name>typename</name>
      </type>
      <name>T</name>
    </parameter>&gt;</parameter_list></template>
    <type>
      <specifier>inline</specifier>
      <name>T</name>
    </type>
    <name>fromVariant</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <specifier>const</specifier>
          <name>QVariant</name>
          <modifier>&amp;</modifier>
        </type>
        <name>value</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <if_stmt>
        <if>if 
        <specifier>constexpr</specifier>
        <condition>(
        <expr>
          <name>
            <name>std</name>
            <operator>::</operator>
            <name>is_same_v</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>T</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>QVariant</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>)</condition>
        <block type="pseudo">
          <block_content>
            <return>return 
            <expr>
              <name>value</name>
            </expr>;</return>
          </block_content>
        </block></if>
      </if_stmt>
      <decl_stmt>
      <decl>
        <type>
          <specifier>const</specifier>
          <name>QMetaType</name>
        </type>
        <name>sourceType</name>
        <init>= 
        <expr>
          <call>
            <name>
              <name>value</name>
              <operator>.</operator>
              <name>metaType</name>
            </name>
            <argument_list>()</argument_list>
          </call>
        </expr></init>
      </decl>;</decl_stmt>
      <decl_stmt>
      <decl>
        <type>
          <specifier>const</specifier>
          <name>QMetaType</name>
        </type>
        <name>targetType</name>
        <init>= 
        <expr>
          <call>
            <name>
              <name>QMetaType</name>
              <operator>::</operator>
              <name>fromType</name>
              <argument_list type="generic">&lt;
              <argument>
                <expr>
                  <name>T</name>
                </expr>
              </argument>&gt;</argument_list>
            </name>
            <argument_list>()</argument_list>
          </call>
        </expr></init>
      </decl>;</decl_stmt>
      <if_stmt>
        <if>if 
        <condition>(
        <expr>
          <name>sourceType</name>
          <operator>==</operator>
          <name>targetType</name>
        </expr>)</condition>
        <block type="pseudo">
          <block_content>
            <return>return 
            <expr>
              <operator>*</operator>
              <cast type="reinterpret">reinterpret_cast
              <argument_list type="generic">&lt;
              <argument>
                <expr>
                  <specifier>const</specifier>
                  <name>T</name>
                  <operator>*</operator>
                </expr>
              </argument>&gt;</argument_list>
              <argument_list>(
              <argument>
                <expr>
                  <call>
                    <name>
                      <name>value</name>
                      <operator>.</operator>
                      <name>constData</name>
                    </name>
                    <argument_list>()</argument_list>
                  </call>
                </expr>
              </argument>)</argument_list></cast>
            </expr>;</return>
          </block_content>
        </block></if>
      </if_stmt>
      <if_stmt>
        <if>if 
        <specifier>constexpr</specifier>
        <condition>(
        <expr>
          <name>
            <name>std</name>
            <operator>::</operator>
            <name>is_same_v</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>T</name>
              </expr>
            </argument>,
            <argument>
              <expr>
                <name>
                  <name>std</name>
                  <operator>::</operator>
                  <name>remove_const_t</name>
                  <argument_list type="generic">&lt;
                  <argument>
                    <expr>
                      <name>
                        <name>std</name>
                        <operator>::</operator>
                        <name>remove_pointer_t</name>
                        <argument_list type="generic">&lt;
                        <argument>
                          <expr>
                            <name>T</name>
                          </expr>
                        </argument>&gt;</argument_list>
                      </name>
                    </expr>
                  </argument>&gt;</argument_list>
                </name>
                <specifier>const</specifier>
                <operator>*</operator>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>)</condition>
        <block>{
        <block_content>
          <using>using 
          <name>nonConstT</name>
          <init>= 
          <type>
            <name>
              <name>std</name>
              <operator>::</operator>
              <name>remove_const_t</name>
              <argument_list type="generic">&lt;
              <argument>
                <expr>
                  <name>
                    <name>std</name>
                    <operator>::</operator>
                    <name>remove_pointer_t</name>
                    <argument_list type="generic">&lt;
                    <argument>
                      <expr>
                        <name>T</name>
                      </expr>
                    </argument>&gt;</argument_list>
                  </name>
                </expr>
              </argument>&gt;</argument_list>
            </name>
            <modifier>*</modifier>
          </type></init>;</using>
          <decl_stmt>
          <decl>
            <type>
              <specifier>const</specifier>
              <name>QMetaType</name>
            </type>
            <name>nonConstTargetType</name>
            <init>= 
            <expr>
              <call>
                <name>
                  <name>QMetaType</name>
                  <operator>::</operator>
                  <name>fromType</name>
                  <argument_list type="generic">&lt;
                  <argument>
                    <expr>
                      <name>nonConstT</name>
                    </expr>
                  </argument>&gt;</argument_list>
                </name>
                <argument_list>()</argument_list>
              </call>
            </expr></init>
          </decl>;</decl_stmt>
          <if_stmt>
            <if>if 
            <condition>(
            <expr>
              <call>
                <name>
                  <name>value</name>
                  <operator>.</operator>
                  <name>metaType</name>
                </name>
                <argument_list>()</argument_list>
              </call>
              <operator>==</operator>
              <name>nonConstTargetType</name>
            </expr>)</condition>
            <block type="pseudo">
              <block_content>
                <return>return 
                <expr>
                  <operator>*</operator>
                  <cast type="reinterpret">reinterpret_cast
                  <argument_list type="generic">&lt;
                  <argument>
                    <expr>
                      <specifier>const</specifier>
                      <name>nonConstT</name>
                      <operator>*</operator>
                    </expr>
                  </argument>&gt;</argument_list>
                  <argument_list>(
                  <argument>
                    <expr>
                      <call>
                        <name>
                          <name>value</name>
                          <operator>.</operator>
                          <name>constData</name>
                        </name>
                        <argument_list>()</argument_list>
                      </call>
                    </expr>
                  </argument>)</argument_list></cast>
                </expr>;</return>
              </block_content>
            </block></if>
          </if_stmt>
        </block_content>}</block></if>
      </if_stmt>
      <if_stmt>
        <if>if 
        <specifier>constexpr</specifier>
        <condition>(
        <expr>
          <name>
            <name>std</name>
            <operator>::</operator>
            <name>is_same_v</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>T</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>QJSValue</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>)</condition>
        <block type="pseudo">
          <block_content>
            <return>return 
            <expr>
              <call>
                <name>toScriptValue</name>
                <argument_list>(
                <argument>
                  <expr>
                    <name>value</name>
                  </expr>
                </argument>)</argument_list>
              </call>
            </expr>;</return>
          </block_content>
        </block></if>
      </if_stmt>
      <if_stmt>
        <if>if 
        <specifier>constexpr</specifier>
        <condition>(
        <expr>
          <name>
            <name>std</name>
            <operator>::</operator>
            <name>is_same_v</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>T</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>QJSManagedValue</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>)</condition>
        <block type="pseudo">
          <block_content>
            <return>return 
            <expr>
              <call>
                <name>toManagedValue</name>
                <argument_list>(
                <argument>
                  <expr>
                    <name>value</name>
                  </expr>
                </argument>)</argument_list>
              </call>
            </expr>;</return>
          </block_content>
        </block></if>
      </if_stmt>
      <if_stmt>
        <if>if 
        <specifier>constexpr</specifier>
        <condition>(
        <expr>
          <name>
            <name>std</name>
            <operator>::</operator>
            <name>is_same_v</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>T</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>QJSPrimitiveValue</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>)</condition>
        <block type="pseudo">
          <block_content>
            <return>return 
            <expr>
              <call>
                <name>toPrimitiveValue</name>
                <argument_list>(
                <argument>
                  <expr>
                    <name>value</name>
                  </expr>
                </argument>)</argument_list>
              </call>
            </expr>;</return>
          </block_content>
        </block></if>
      </if_stmt>
      <if_stmt>
        <if>if 
        <specifier>constexpr</specifier>
        <condition>(
        <expr>
          <name>
            <name>std</name>
            <operator>::</operator>
            <name>is_same_v</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>T</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>QString</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>)</condition>
        <block>{
        <block_content>
          <if_stmt>
            <if>if 
            <condition>(
            <expr>
              <call>
                <name>
                  <name>sourceType</name>
                  <operator>.</operator>
                  <name>flags</name>
                </name>
                <argument_list>()</argument_list>
              </call>
              <operator>&amp;</operator>
              <name>
                <name>QMetaType</name>
                <operator>::</operator>
                <name>PointerToQObject</name>
              </name>
            </expr>)</condition>
            <block>{
            <block_content>
              <return>return 
              <expr>
                <call>
                  <name>convertQObjectToString</name>
                  <argument_list>( 
                  <argument>
                    <expr>
                      <operator>*</operator>
                      <cast type="reinterpret">reinterpret_cast
                      <argument_list type="generic">&lt;
                      <argument>
                        <expr>
                          <name>QObject</name>
                          <operator>*</operator>
                          <specifier>const</specifier>
                          <operator>*</operator>
                        </expr>
                      </argument>&gt;</argument_list>
                      <argument_list>(
                      <argument>
                        <expr>
                          <call>
                            <name>
                              <name>value</name>
                              <operator>.</operator>
                              <name>constData</name>
                            </name>
                            <argument_list>()</argument_list>
                          </call>
                        </expr>
                      </argument>)</argument_list></cast>
                    </expr>
                  </argument>)</argument_list>
                </call>
              </expr>;</return>
            </block_content>}</block></if>
          </if_stmt>
        </block_content>}</block></if>
      </if_stmt>
      <if_stmt>
        <if>if 
        <specifier>constexpr</specifier>
        <condition>(
        <expr>
          <name>
            <name>std</name>
            <operator>::</operator>
            <name>is_same_v</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>QObject</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>
                  <name>std</name>
                  <operator>::</operator>
                  <name>remove_const_t</name>
                  <argument_list type="generic">&lt;
                  <argument>
                    <expr>
                      <name>
                        <name>std</name>
                        <operator>::</operator>
                        <name>remove_pointer_t</name>
                        <argument_list type="generic">&lt;
                        <argument>
                          <expr>
                            <name>T</name>
                          </expr>
                        </argument>&gt;</argument_list>
                      </name>
                    </expr>
                  </argument>&gt;</argument_list>
                </name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>)</condition>
        <block>{
        <block_content>
          <if_stmt>
            <if>if 
            <condition>(
            <expr>
              <call>
                <name>
                  <name>sourceType</name>
                  <operator>.</operator>
                  <name>flags</name>
                </name>
                <argument_list>()</argument_list>
              </call>
              <operator>&amp;</operator>
              <name>
                <name>QMetaType</name>
                <operator>::</operator>
                <name>PointerToQObject</name>
              </name>
            </expr>)</condition>
            <block>{
            <block_content>
              <return>return 
              <expr>
                <operator>*</operator>
                <cast type="static">static_cast
                <argument_list type="generic">&lt;
                <argument>
                  <expr>
                    <name>QObject</name>
                    <operator>*</operator>
                    <specifier>const</specifier>
                    <operator>*</operator>
                  </expr>
                </argument>&gt;</argument_list>
                <argument_list>(
                <argument>
                  <expr>
                    <call>
                      <name>
                        <name>value</name>
                        <operator>.</operator>
                        <name>constData</name>
                      </name>
                      <argument_list>()</argument_list>
                    </call>
                  </expr>
                </argument>)</argument_list></cast>
              </expr>;</return>
              <comment type="line">// We should not access
              source-&gt;metaObject() here since that may trigger
              some</comment>
              <comment type="line">// rather involved code.
              convertVariant() can do this using property
              caches.</comment>
            </block_content>}</block></if>
          </if_stmt>
        </block_content>}</block></if>
      </if_stmt>
      <if_stmt>
        <if>if 
        <condition>(
        <expr>
          <name>sourceType</name>
          <operator>==</operator>
          <call>
            <name>
              <name>QMetaType</name>
              <operator>::</operator>
              <name>fromType</name>
              <argument_list type="generic">&lt;
              <argument>
                <expr>
                  <name>QJSValue</name>
                </expr>
              </argument>&gt;</argument_list>
            </name>
            <argument_list>()</argument_list>
          </call>
        </expr>)</condition>
        <block type="pseudo">
          <block_content>
            <return>return 
            <expr>
              <call>
                <name>
                  <name>fromScriptValue</name>
                  <argument_list type="generic">&lt;
                  <argument>
                    <expr>
                      <name>T</name>
                    </expr>
                  </argument>&gt;</argument_list>
                </name>
                <argument_list>(
                <argument>
                  <expr>
                    <operator>*</operator>
                    <cast type="reinterpret">reinterpret_cast
                    <argument_list type="generic">&lt;
                    <argument>
                      <expr>
                        <specifier>const</specifier>
                        <name>QJSValue</name>
                        <operator>*</operator>
                      </expr>
                    </argument>&gt;</argument_list>
                    <argument_list>(
                    <argument>
                      <expr>
                        <call>
                          <name>
                            <name>value</name>
                            <operator>.</operator>
                            <name>constData</name>
                          </name>
                          <argument_list>()</argument_list>
                        </call>
                      </expr>
                    </argument>)</argument_list></cast>
                  </expr>
                </argument>)</argument_list>
              </call>
            </expr>;</return>
          </block_content>
        </block></if>
      </if_stmt>
      <if_stmt>
        <if>if 
        <condition>(
        <expr>
          <name>sourceType</name>
          <operator>==</operator>
          <call>
            <name>
              <name>QMetaType</name>
              <operator>::</operator>
              <name>fromType</name>
              <argument_list type="generic">&lt;
              <argument>
                <expr>
                  <name>QJSManagedValue</name>
                </expr>
              </argument>&gt;</argument_list>
            </name>
            <argument_list>()</argument_list>
          </call>
        </expr>)</condition>
        <block>{
        <block_content>
          <return>return 
          <expr>
            <call>
              <name>
                <name>fromManagedValue</name>
                <argument_list type="generic">&lt;
                <argument>
                  <expr>
                    <name>T</name>
                  </expr>
                </argument>&gt;</argument_list>
              </name>
              <argument_list>( 
              <argument>
                <expr>
                  <operator>*</operator>
                  <cast type="reinterpret">reinterpret_cast
                  <argument_list type="generic">&lt;
                  <argument>
                    <expr>
                      <specifier>const</specifier>
                      <name>QJSManagedValue</name>
                      <operator>*</operator>
                    </expr>
                  </argument>&gt;</argument_list>
                  <argument_list>(
                  <argument>
                    <expr>
                      <call>
                        <name>
                          <name>value</name>
                          <operator>.</operator>
                          <name>constData</name>
                        </name>
                        <argument_list>()</argument_list>
                      </call>
                    </expr>
                  </argument>)</argument_list></cast>
                </expr>
              </argument>)</argument_list>
            </call>
          </expr>;</return>
        </block_content>}</block></if>
      </if_stmt>
      <if_stmt>
        <if>if 
        <condition>(
        <expr>
          <name>sourceType</name>
          <operator>==</operator>
          <call>
            <name>
              <name>QMetaType</name>
              <operator>::</operator>
              <name>fromType</name>
              <argument_list type="generic">&lt;
              <argument>
                <expr>
                  <name>QJSPrimitiveValue</name>
                </expr>
              </argument>&gt;</argument_list>
            </name>
            <argument_list>()</argument_list>
          </call>
        </expr>)</condition>
        <block>{
        <block_content>
          <return>return 
          <expr>
            <call>
              <name>
                <name>fromPrimitiveValue</name>
                <argument_list type="generic">&lt;
                <argument>
                  <expr>
                    <name>T</name>
                  </expr>
                </argument>&gt;</argument_list>
              </name>
              <argument_list>( 
              <argument>
                <expr>
                  <operator>*</operator>
                  <cast type="reinterpret">reinterpret_cast
                  <argument_list type="generic">&lt;
                  <argument>
                    <expr>
                      <specifier>const</specifier>
                      <name>QJSPrimitiveValue</name>
                      <operator>*</operator>
                    </expr>
                  </argument>&gt;</argument_list>
                  <argument_list>(
                  <argument>
                    <expr>
                      <call>
                        <name>
                          <name>value</name>
                          <operator>.</operator>
                          <name>constData</name>
                        </name>
                        <argument_list>()</argument_list>
                      </call>
                    </expr>
                  </argument>)</argument_list></cast>
                </expr>
              </argument>)</argument_list>
            </call>
          </expr>;</return>
        </block_content>}</block></if>
      </if_stmt>
      <block>{
      <block_content>
        <decl_stmt>
        <decl>
          <type>
            <name>T</name>
          </type>
          <name>t</name>
          <argument_list>{}</argument_list>
        </decl>;</decl_stmt>
        <if_stmt>
          <if>if 
          <condition>(
          <expr>
            <call>
              <name>
                <name>value</name>
                <operator>.</operator>
                <name>metaType</name>
              </name>
              <argument_list>()</argument_list>
            </call>
            <operator>==</operator>
            <call>
              <name>
                <name>QMetaType</name>
                <operator>::</operator>
                <name>fromType</name>
                <argument_list type="generic">&lt;
                <argument>
                  <expr>
                    <name>QString</name>
                  </expr>
                </argument>&gt;</argument_list>
              </name>
              <argument_list>()</argument_list>
            </call>
          </expr>)</condition>
          <block>{
          <block_content>
            <if_stmt>
              <if>if 
              <condition>(
              <expr>
                <call>
                  <name>convertString</name>
                  <argument_list>(
                  <argument>
                    <expr>
                      <call>
                        <name>
                          <name>value</name>
                          <operator>.</operator>
                          <name>toString</name>
                        </name>
                        <argument_list>()</argument_list>
                      </call>
                    </expr>
                  </argument>, 
                  <argument>
                    <expr>
                      <name>targetType</name>
                    </expr>
                  </argument>, 
                  <argument>
                    <expr>
                      <operator>&amp;</operator>
                      <name>t</name>
                    </expr>
                  </argument>)</argument_list>
                </call>
              </expr>)</condition>
              <block type="pseudo">
                <block_content>
                  <return>return 
                  <expr>
                    <name>t</name>
                  </expr>;</return>
                </block_content>
              </block></if>
            </if_stmt>
          </block_content>}</block></if>
          <if type="elseif">else if 
          <condition>(
          <expr>
            <call>
              <name>convertVariant</name>
              <argument_list>(
              <argument>
                <expr>
                  <name>value</name>
                </expr>
              </argument>, 
              <argument>
                <expr>
                  <name>targetType</name>
                </expr>
              </argument>, 
              <argument>
                <expr>
                  <operator>&amp;</operator>
                  <name>t</name>
                </expr>
              </argument>)</argument_list>
            </call>
          </expr>)</condition>
          <block>{
          <block_content>
            <return>return 
            <expr>
              <name>t</name>
            </expr>;</return>
          </block_content>}</block></if>
        </if_stmt>
        <expr_stmt>
        <expr>
          <call>
            <name>
              <name>QMetaType</name>
              <operator>::</operator>
              <name>convert</name>
            </name>
            <argument_list>(
            <argument>
              <expr>
                <call>
                  <name>
                    <name>value</name>
                    <operator>.</operator>
                    <name>metaType</name>
                  </name>
                  <argument_list>()</argument_list>
                </call>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <call>
                  <name>
                    <name>value</name>
                    <operator>.</operator>
                    <name>constData</name>
                  </name>
                  <argument_list>()</argument_list>
                </call>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>targetType</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <operator>&amp;</operator>
                <name>t</name>
              </expr>
            </argument>)</argument_list>
          </call>
        </expr>;</expr_stmt>
        <return>return 
        <expr>
          <name>t</name>
        </expr>;</return>
      </block_content>}</block>
    </block_content>}</block>
  </function>
  <function>
    <template>template
    <parameter_list>&lt;
    <parameter>
      <type>
        <name>typename</name>
      </type>
      <name>From</name>
    </parameter>, 
    <parameter>
      <type>
        <name>typename</name>
      </type>
      <name>To</name>
    </parameter>&gt;</parameter_list></template>
    <type>
      <specifier>inline</specifier>
      <name>To</name>
    </type>
    <name>coerceValue</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <specifier>const</specifier>
          <name>From</name>
          <modifier>&amp;</modifier>
        </type>
        <name>from</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <if_stmt>
        <if>if 
        <specifier>constexpr</specifier>
        <condition>(
        <expr>
          <name>
            <name>std</name>
            <operator>::</operator>
            <name>is_base_of_v</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>To</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>From</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>)</condition>
        <block type="pseudo">
          <block_content>
            <return>return 
            <expr>
              <name>from</name>
            </expr>;</return>
          </block_content>
        </block></if>
      </if_stmt>
      <if_stmt>
        <if>if 
        <specifier>constexpr</specifier>
        <condition>(
        <expr>
          <name>
            <name>std</name>
            <operator>::</operator>
            <name>is_same_v</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>To</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>QJSValue</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>)</condition>
        <block type="pseudo">
          <block_content>
            <return>return 
            <expr>
              <call>
                <name>toScriptValue</name>
                <argument_list>(
                <argument>
                  <expr>
                    <name>from</name>
                  </expr>
                </argument>)</argument_list>
              </call>
            </expr>;</return>
          </block_content>
        </block></if>
      </if_stmt>
      <if_stmt>
        <if>if 
        <specifier>constexpr</specifier>
        <condition>(
        <expr>
          <name>
            <name>std</name>
            <operator>::</operator>
            <name>is_same_v</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>From</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>QJSValue</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>)</condition>
        <block type="pseudo">
          <block_content>
            <return>return 
            <expr>
              <call>
                <name>
                  <name>fromScriptValue</name>
                  <argument_list type="generic">&lt;
                  <argument>
                    <expr>
                      <name>To</name>
                    </expr>
                  </argument>&gt;</argument_list>
                </name>
                <argument_list>(
                <argument>
                  <expr>
                    <name>from</name>
                  </expr>
                </argument>)</argument_list>
              </call>
            </expr>;</return>
          </block_content>
        </block></if>
      </if_stmt>
      <if_stmt>
        <if>if 
        <specifier>constexpr</specifier>
        <condition>(
        <expr>
          <name>
            <name>std</name>
            <operator>::</operator>
            <name>is_same_v</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>To</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>QJSManagedValue</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>)</condition>
        <block type="pseudo">
          <block_content>
            <return>return 
            <expr>
              <call>
                <name>toManagedValue</name>
                <argument_list>(
                <argument>
                  <expr>
                    <name>from</name>
                  </expr>
                </argument>)</argument_list>
              </call>
            </expr>;</return>
          </block_content>
        </block></if>
      </if_stmt>
      <if_stmt>
        <if>if 
        <specifier>constexpr</specifier>
        <condition>(
        <expr>
          <name>
            <name>std</name>
            <operator>::</operator>
            <name>is_same_v</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>From</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>QJSManagedValue</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>)</condition>
        <block type="pseudo">
          <block_content>
            <return>return 
            <expr>
              <call>
                <name>
                  <name>fromManagedValue</name>
                  <argument_list type="generic">&lt;
                  <argument>
                    <expr>
                      <name>To</name>
                    </expr>
                  </argument>&gt;</argument_list>
                </name>
                <argument_list>(
                <argument>
                  <expr>
                    <name>from</name>
                  </expr>
                </argument>)</argument_list>
              </call>
            </expr>;</return>
          </block_content>
        </block></if>
      </if_stmt>
      <if_stmt>
        <if>if 
        <specifier>constexpr</specifier>
        <condition>(
        <expr>
          <name>
            <name>std</name>
            <operator>::</operator>
            <name>is_same_v</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>To</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>QJSPrimitiveValue</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>)</condition>
        <block type="pseudo">
          <block_content>
            <return>return 
            <expr>
              <call>
                <name>toPrimitiveValue</name>
                <argument_list>(
                <argument>
                  <expr>
                    <name>from</name>
                  </expr>
                </argument>)</argument_list>
              </call>
            </expr>;</return>
          </block_content>
        </block></if>
      </if_stmt>
      <if_stmt>
        <if>if 
        <specifier>constexpr</specifier>
        <condition>(
        <expr>
          <name>
            <name>std</name>
            <operator>::</operator>
            <name>is_same_v</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>From</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>QJSPrimitiveValue</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>)</condition>
        <block type="pseudo">
          <block_content>
            <return>return 
            <expr>
              <call>
                <name>
                  <name>fromPrimitiveValue</name>
                  <argument_list type="generic">&lt;
                  <argument>
                    <expr>
                      <name>To</name>
                    </expr>
                  </argument>&gt;</argument_list>
                </name>
                <argument_list>(
                <argument>
                  <expr>
                    <name>from</name>
                  </expr>
                </argument>)</argument_list>
              </call>
            </expr>;</return>
          </block_content>
        </block></if>
      </if_stmt>
      <if_stmt>
        <if>if 
        <specifier>constexpr</specifier>
        <condition>(
        <expr>
          <name>
            <name>std</name>
            <operator>::</operator>
            <name>is_same_v</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>From</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>QVariant</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>)</condition>
        <block type="pseudo">
          <block_content>
            <return>return 
            <expr>
              <call>
                <name>
                  <name>fromVariant</name>
                  <argument_list type="generic">&lt;
                  <argument>
                    <expr>
                      <name>To</name>
                    </expr>
                  </argument>&gt;</argument_list>
                </name>
                <argument_list>(
                <argument>
                  <expr>
                    <name>from</name>
                  </expr>
                </argument>)</argument_list>
              </call>
            </expr>;</return>
          </block_content>
        </block></if>
      </if_stmt>
      <if_stmt>
        <if>if 
        <specifier>constexpr</specifier>
        <condition>(
        <expr>
          <name>
            <name>std</name>
            <operator>::</operator>
            <name>is_same_v</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>To</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>QVariant</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>)</condition>
        <block type="pseudo">
          <block_content>
            <return>return 
            <expr>
              <call>
                <name>
                  <name>QVariant</name>
                  <operator>::</operator>
                  <name>fromValue</name>
                </name>
                <argument_list>(
                <argument>
                  <expr>
                    <name>from</name>
                  </expr>
                </argument>)</argument_list>
              </call>
            </expr>;</return>
          </block_content>
        </block></if>
      </if_stmt>
      <if_stmt>
        <if>if 
        <specifier>constexpr</specifier>
        <condition>(
        <expr>
          <name>
            <name>std</name>
            <operator>::</operator>
            <name>is_same_v</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>To</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>QString</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>)</condition>
        <block>{
        <block_content>
          <if_stmt>
            <if>if 
            <specifier>constexpr</specifier>
            <condition>(
            <expr>
              <name>
                <name>std</name>
                <operator>::</operator>
                <name>is_base_of_v</name>
                <argument_list type="generic">&lt;
                <argument>
                  <expr>
                    <name>QObject</name>
                  </expr>
                </argument>, 
                <argument>
                  <expr>
                    <name>
                      <name>std</name>
                      <operator>::</operator>
                      <name>remove_const_t</name>
                      <argument_list type="generic">&lt;
                      <argument>
                        <expr>
                          <name>
                            <name>std</name>
                            <operator>::</operator>
                            <name>remove_pointer_t</name>
                            <argument_list type="generic">&lt;
                            <argument>
                              <expr>
                                <name>From</name>
                              </expr>
                            </argument>&gt;</argument_list>
                          </name>
                        </expr>
                      </argument>&gt;</argument_list>
                    </name>
                  </expr>
                </argument>&gt;</argument_list>
              </name>
            </expr>)</condition>
            <block type="pseudo">
              <block_content>
                <return>return 
                <expr>
                  <call>
                    <name>convertQObjectToString</name>
                    <argument_list>(
                    <argument>
                      <expr>
                        <name>from</name>
                      </expr>
                    </argument>)</argument_list>
                  </call>
                </expr>;</return>
              </block_content>
            </block></if>
          </if_stmt>
        </block_content>}</block></if>
      </if_stmt>
      <if_stmt>
        <if>if 
        <specifier>constexpr</specifier>
        <condition>(
        <expr>
          <name>
            <name>std</name>
            <operator>::</operator>
            <name>is_same_v</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>From</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>QDateTime</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>)</condition>
        <block>{
        <block_content>
          <if_stmt>
            <if>if 
            <specifier>constexpr</specifier>
            <condition>(
            <expr>
              <name>
                <name>std</name>
                <operator>::</operator>
                <name>is_same_v</name>
                <argument_list type="generic">&lt;
                <argument>
                  <expr>
                    <name>To</name>
                  </expr>
                </argument>, 
                <argument>
                  <expr>
                    <name>QDate</name>
                  </expr>
                </argument>&gt;</argument_list>
              </name>
            </expr>)</condition>
            <block type="pseudo">
              <block_content>
                <return>return 
                <expr>
                  <call>
                    <name>convertDateTimeToDate</name>
                    <argument_list>(
                    <argument>
                      <expr>
                        <call>
                          <name>
                            <name>from</name>
                            <operator>.</operator>
                            <name>toLocalTime</name>
                          </name>
                          <argument_list>()</argument_list>
                        </call>
                      </expr>
                    </argument>)</argument_list>
                  </call>
                </expr>;</return>
              </block_content>
            </block></if>
          </if_stmt>
          <if_stmt>
            <if>if 
            <specifier>constexpr</specifier>
            <condition>(
            <expr>
              <name>
                <name>std</name>
                <operator>::</operator>
                <name>is_same_v</name>
                <argument_list type="generic">&lt;
                <argument>
                  <expr>
                    <name>To</name>
                  </expr>
                </argument>, 
                <argument>
                  <expr>
                    <name>QTime</name>
                  </expr>
                </argument>&gt;</argument_list>
              </name>
            </expr>)</condition>
            <block type="pseudo">
              <block_content>
                <return>return 
                <expr>
                  <call>
                    <name>
                      <name>from</name>
                      <operator>.</operator>
                      <name>toLocalTime</name>
                    </name>
                    <argument_list>()</argument_list>
                  </call>
                  <operator>.</operator>
                  <call>
                    <name>time</name>
                    <argument_list>()</argument_list>
                  </call>
                </expr>;</return>
              </block_content>
            </block></if>
          </if_stmt>
          <if_stmt>
            <if>if 
            <specifier>constexpr</specifier>
            <condition>(
            <expr>
              <name>
                <name>std</name>
                <operator>::</operator>
                <name>is_same_v</name>
                <argument_list type="generic">&lt;
                <argument>
                  <expr>
                    <name>To</name>
                  </expr>
                </argument>, 
                <argument>
                  <expr>
                    <name>QString</name>
                  </expr>
                </argument>&gt;</argument_list>
              </name>
            </expr>)</condition>
            <block type="pseudo">
              <block_content>
                <return>return 
                <expr>
                  <call>
                    <name>convertDateTimeToString</name>
                    <argument_list>(
                    <argument>
                      <expr>
                        <call>
                          <name>
                            <name>from</name>
                            <operator>.</operator>
                            <name>toLocalTime</name>
                          </name>
                          <argument_list>()</argument_list>
                        </call>
                      </expr>
                    </argument>)</argument_list>
                  </call>
                </expr>;</return>
              </block_content>
            </block></if>
          </if_stmt>
        </block_content>}</block></if>
      </if_stmt>
      <if_stmt>
        <if>if 
        <specifier>constexpr</specifier>
        <condition>(
        <expr>
          <name>
            <name>std</name>
            <operator>::</operator>
            <name>is_same_v</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>From</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>QDate</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>)</condition>
        <block>{
        <block_content>
          <if_stmt>
            <if>if 
            <specifier>constexpr</specifier>
            <condition>(
            <expr>
              <name>
                <name>std</name>
                <operator>::</operator>
                <name>is_same_v</name>
                <argument_list type="generic">&lt;
                <argument>
                  <expr>
                    <name>To</name>
                  </expr>
                </argument>, 
                <argument>
                  <expr>
                    <name>QDateTime</name>
                  </expr>
                </argument>&gt;</argument_list>
              </name>
            </expr>)</condition>
            <block type="pseudo">
              <block_content>
                <return>return 
                <expr>
                  <call>
                    <name>
                      <name>from</name>
                      <operator>.</operator>
                      <name>startOfDay</name>
                    </name>
                    <argument_list>(
                    <argument>
                      <expr>
                        <name>
                          <name>QTimeZone</name>
                          <operator>::</operator>
                          <name>UTC</name>
                        </name>
                      </expr>
                    </argument>)</argument_list>
                  </call>
                </expr>;</return>
              </block_content>
            </block></if>
          </if_stmt>
          <if_stmt>
            <if>if 
            <specifier>constexpr</specifier>
            <condition>(
            <expr>
              <name>
                <name>std</name>
                <operator>::</operator>
                <name>is_same_v</name>
                <argument_list type="generic">&lt;
                <argument>
                  <expr>
                    <name>To</name>
                  </expr>
                </argument>, 
                <argument>
                  <expr>
                    <name>QTime</name>
                  </expr>
                </argument>&gt;</argument_list>
              </name>
            </expr>)</condition>
            <block>{
            <block_content>
              <comment type="line">// This is the current time zone
              offset, for better or worse</comment>
              <return>return 
              <expr>
                <call>
                  <name>
                    <name>coerceValue</name>
                    <argument_list type="generic">&lt;
                    <argument>
                      <expr>
                        <name>QDateTime</name>
                      </expr>
                    </argument>, 
                    <argument>
                      <expr>
                        <name>QTime</name>
                      </expr>
                    </argument>&gt;</argument_list>
                  </name>
                  <argument_list>(
                  <argument>
                    <expr>
                      <call>
                        <name>
                          <name>coerceValue</name>
                          <argument_list type="generic">&lt;
                          <argument>
                            <expr>
                              <name>QDate</name>
                            </expr>
                          </argument>, 
                          <argument>
                            <expr>
                              <name>QDateTime</name>
                            </expr>
                          </argument>&gt;</argument_list>
                        </name>
                        <argument_list>(
                        <argument>
                          <expr>
                            <name>from</name>
                          </expr>
                        </argument>)</argument_list>
                      </call>
                    </expr>
                  </argument>)</argument_list>
                </call>
              </expr>;</return>
            </block_content>}</block></if>
          </if_stmt>
          <if_stmt>
            <if>if 
            <specifier>constexpr</specifier>
            <condition>(
            <expr>
              <name>
                <name>std</name>
                <operator>::</operator>
                <name>is_same_v</name>
                <argument_list type="generic">&lt;
                <argument>
                  <expr>
                    <name>To</name>
                  </expr>
                </argument>, 
                <argument>
                  <expr>
                    <name>QString</name>
                  </expr>
                </argument>&gt;</argument_list>
              </name>
            </expr>)</condition>
            <block type="pseudo">
              <block_content>
                <return>return 
                <expr>
                  <call>
                    <name>convertDateTimeToString</name>
                    <argument_list>(
                    <argument>
                      <expr>
                        <call>
                          <name>
                            <name>coerceValue</name>
                            <argument_list type="generic">&lt;
                            <argument>
                              <expr>
                                <name>QDate</name>
                              </expr>
                            </argument>, 
                            <argument>
                              <expr>
                                <name>QDateTime</name>
                              </expr>
                            </argument>&gt;</argument_list>
                          </name>
                          <argument_list>(
                          <argument>
                            <expr>
                              <name>from</name>
                            </expr>
                          </argument>)</argument_list>
                        </call>
                      </expr>
                    </argument>)</argument_list>
                  </call>
                </expr>;</return>
              </block_content>
            </block></if>
          </if_stmt>
        </block_content>}</block></if>
      </if_stmt>
      <if_stmt>
        <if>if 
        <specifier>constexpr</specifier>
        <condition>(
        <expr>
          <name>
            <name>std</name>
            <operator>::</operator>
            <name>is_same_v</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>From</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>QTime</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>)</condition>
        <block>{
        <block_content>
          <if_stmt>
            <if>if 
            <specifier>constexpr</specifier>
            <condition>(
            <expr>
              <name>
                <name>std</name>
                <operator>::</operator>
                <name>is_same_v</name>
                <argument_list type="generic">&lt;
                <argument>
                  <expr>
                    <name>To</name>
                  </expr>
                </argument>, 
                <argument>
                  <expr>
                    <name>QDate</name>
                  </expr>
                </argument>&gt;</argument_list>
              </name>
            </expr>)</condition>
            <block>{
            <block_content>
              <comment type="line">// Yes. April Fools' 1971. See
              qv4dateobject.cpp.</comment>
              <return>return 
              <expr>
                <ternary>
                  <condition>
                  <expr>
                    <call>
                      <name>
                        <name>from</name>
                        <operator>.</operator>
                        <name>isValid</name>
                      </name>
                      <argument_list>()</argument_list>
                    </call>
                  </expr>?</condition>
                  <then>
                    <expr>
                      <call>
                        <name>QDate</name>
                        <argument_list>(
                        <argument>
                          <expr>
                            <literal type="number">1971</literal>
                          </expr>
                        </argument>, 
                        <argument>
                          <expr>
                            <literal type="number">4</literal>
                          </expr>
                        </argument>, 
                        <argument>
                          <expr>
                            <literal type="number">1</literal>
                          </expr>
                        </argument>)</argument_list>
                      </call>
                    </expr>
                  </then>
                  <else>: 
                  <expr>
                    <call>
                      <name>QDate</name>
                      <argument_list>()</argument_list>
                    </call>
                  </expr></else>
                </ternary>
              </expr>;</return>
            </block_content>}</block></if>
          </if_stmt>
          <if_stmt>
            <if>if 
            <specifier>constexpr</specifier>
            <condition>(
            <expr>
              <name>
                <name>std</name>
                <operator>::</operator>
                <name>is_same_v</name>
                <argument_list type="generic">&lt;
                <argument>
                  <expr>
                    <name>To</name>
                  </expr>
                </argument>, 
                <argument>
                  <expr>
                    <name>QDateTime</name>
                  </expr>
                </argument>&gt;</argument_list>
              </name>
            </expr>)</condition>
            <block type="pseudo">
              <block_content>
                <return>return 
                <expr>
                  <call>
                    <name>QDateTime</name>
                    <argument_list>(
                    <argument>
                      <expr>
                        <call>
                          <name>
                            <name>coerceValue</name>
                            <argument_list type="generic">&lt;
                            <argument>
                              <expr>
                                <name>QTime</name>
                              </expr>
                            </argument>, 
                            <argument>
                              <expr>
                                <name>QDate</name>
                              </expr>
                            </argument>&gt;</argument_list>
                          </name>
                          <argument_list>(
                          <argument>
                            <expr>
                              <name>from</name>
                            </expr>
                          </argument>)</argument_list>
                        </call>
                      </expr>
                    </argument>, 
                    <argument>
                      <expr>
                        <name>from</name>
                      </expr>
                    </argument>, 
                    <argument>
                      <expr>
                        <name>
                          <name>QTimeZone</name>
                          <operator>::</operator>
                          <name>LocalTime</name>
                        </name>
                      </expr>
                    </argument>)</argument_list>
                  </call>
                </expr>;</return>
              </block_content>
            </block></if>
          </if_stmt>
          <if_stmt>
            <if>if 
            <specifier>constexpr</specifier>
            <condition>(
            <expr>
              <name>
                <name>std</name>
                <operator>::</operator>
                <name>is_same_v</name>
                <argument_list type="generic">&lt;
                <argument>
                  <expr>
                    <name>To</name>
                  </expr>
                </argument>, 
                <argument>
                  <expr>
                    <name>QString</name>
                  </expr>
                </argument>&gt;</argument_list>
              </name>
            </expr>)</condition>
            <block type="pseudo">
              <block_content>
                <return>return 
                <expr>
                  <call>
                    <name>convertDateTimeToString</name>
                    <argument_list>(
                    <argument>
                      <expr>
                        <call>
                          <name>
                            <name>coerceValue</name>
                            <argument_list type="generic">&lt;
                            <argument>
                              <expr>
                                <name>QTime</name>
                              </expr>
                            </argument>, 
                            <argument>
                              <expr>
                                <name>QDateTime</name>
                              </expr>
                            </argument>&gt;</argument_list>
                          </name>
                          <argument_list>(
                          <argument>
                            <expr>
                              <name>from</name>
                            </expr>
                          </argument>)</argument_list>
                        </call>
                      </expr>
                    </argument>)</argument_list>
                  </call>
                </expr>;</return>
              </block_content>
            </block></if>
          </if_stmt>
        </block_content>}</block></if>
      </if_stmt>
      <if_stmt>
        <if>if 
        <specifier>constexpr</specifier>
        <condition>(
        <expr>
          <name>
            <name>std</name>
            <operator>::</operator>
            <name>is_same_v</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>To</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>
                  <name>std</name>
                  <operator>::</operator>
                  <name>remove_const_t</name>
                  <argument_list type="generic">&lt;
                  <argument>
                    <expr>
                      <name>
                        <name>std</name>
                        <operator>::</operator>
                        <name>remove_pointer_t</name>
                        <argument_list type="generic">&lt;
                        <argument>
                          <expr>
                            <name>To</name>
                          </expr>
                        </argument>&gt;</argument_list>
                      </name>
                    </expr>
                  </argument>&gt;</argument_list>
                </name>
                <specifier>const</specifier>
                <operator>*</operator>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>)</condition>
        <block>{
        <block_content>
          <using>using 
          <name>nonConstTo</name>
          <init>= 
          <type>
            <name>
              <name>std</name>
              <operator>::</operator>
              <name>remove_const_t</name>
              <argument_list type="generic">&lt;
              <argument>
                <expr>
                  <name>
                    <name>std</name>
                    <operator>::</operator>
                    <name>remove_pointer_t</name>
                    <argument_list type="generic">&lt;
                    <argument>
                      <expr>
                        <name>To</name>
                      </expr>
                    </argument>&gt;</argument_list>
                  </name>
                </expr>
              </argument>&gt;</argument_list>
            </name>
            <modifier>*</modifier>
          </type></init>;</using>
          <if_stmt>
            <if>if 
            <specifier>constexpr</specifier>
            <condition>(
            <expr>
              <name>
                <name>std</name>
                <operator>::</operator>
                <name>is_same_v</name>
                <argument_list type="generic">&lt;
                <argument>
                  <expr>
                    <name>From</name>
                  </expr>
                </argument>, 
                <argument>
                  <expr>
                    <name>nonConstTo</name>
                  </expr>
                </argument>&gt;</argument_list>
              </name>
            </expr>)</condition>
            <block type="pseudo">
              <block_content>
                <return>return 
                <expr>
                  <name>from</name>
                </expr>;</return>
              </block_content>
            </block></if>
          </if_stmt>
        </block_content>}</block></if>
      </if_stmt>
      <block>{
      <block_content>
        <decl_stmt>
        <decl>
          <type>
            <specifier>const</specifier>
            <name>QMetaType</name>
          </type>
          <name>sourceType</name>
          <init>= 
          <expr>
            <call>
              <name>
                <name>QMetaType</name>
                <operator>::</operator>
                <name>fromType</name>
                <argument_list type="generic">&lt;
                <argument>
                  <expr>
                    <name>From</name>
                  </expr>
                </argument>&gt;</argument_list>
              </name>
              <argument_list>()</argument_list>
            </call>
          </expr></init>
        </decl>;</decl_stmt>
        <decl_stmt>
        <decl>
          <type>
            <specifier>const</specifier>
            <name>QMetaType</name>
          </type>
          <name>targetType</name>
          <init>= 
          <expr>
            <call>
              <name>
                <name>QMetaType</name>
                <operator>::</operator>
                <name>fromType</name>
                <argument_list type="generic">&lt;
                <argument>
                  <expr>
                    <name>To</name>
                  </expr>
                </argument>&gt;</argument_list>
              </name>
              <argument_list>()</argument_list>
            </call>
          </expr></init>
        </decl>;</decl_stmt>
        <decl_stmt>
        <decl>
          <type>
            <name>To</name>
          </type>
          <name>to</name>
          <argument_list>{}</argument_list>
        </decl>;</decl_stmt>
        <if_stmt>
          <if>if 
          <specifier>constexpr</specifier>
          <condition>(
          <expr>
            <name>
              <name>std</name>
              <operator>::</operator>
              <name>is_same_v</name>
              <argument_list type="generic">&lt;
              <argument>
                <expr>
                  <name>From</name>
                </expr>
              </argument>, 
              <argument>
                <expr>
                  <name>QString</name>
                </expr>
              </argument>&gt;</argument_list>
            </name>
          </expr>)</condition>
          <block>{
          <block_content>
            <if_stmt>
              <if>if 
              <condition>(
              <expr>
                <call>
                  <name>convertString</name>
                  <argument_list>(
                  <argument>
                    <expr>
                      <name>from</name>
                    </expr>
                  </argument>, 
                  <argument>
                    <expr>
                      <name>targetType</name>
                    </expr>
                  </argument>, 
                  <argument>
                    <expr>
                      <operator>&amp;</operator>
                      <name>to</name>
                    </expr>
                  </argument>)</argument_list>
                </call>
              </expr>)</condition>
              <block type="pseudo">
                <block_content>
                  <return>return 
                  <expr>
                    <name>to</name>
                  </expr>;</return>
                </block_content>
              </block></if>
            </if_stmt>
          </block_content>}</block></if>
          <if type="elseif">else if 
          <condition>(
          <expr>
            <call>
              <name>convertMetaType</name>
              <argument_list>(
              <argument>
                <expr>
                  <name>sourceType</name>
                </expr>
              </argument>, 
              <argument>
                <expr>
                  <operator>&amp;</operator>
                  <name>from</name>
                </expr>
              </argument>, 
              <argument>
                <expr>
                  <name>targetType</name>
                </expr>
              </argument>, 
              <argument>
                <expr>
                  <operator>&amp;</operator>
                  <name>to</name>
                </expr>
              </argument>)</argument_list>
            </call>
          </expr>)</condition>
          <block>{
          <block_content>
            <return>return 
            <expr>
              <name>to</name>
            </expr>;</return>
          </block_content>}</block></if>
        </if_stmt>
        <expr_stmt>
        <expr>
          <call>
            <name>
              <name>QMetaType</name>
              <operator>::</operator>
              <name>convert</name>
            </name>
            <argument_list>(
            <argument>
              <expr>
                <name>sourceType</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <operator>&amp;</operator>
                <name>from</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>targetType</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <operator>&amp;</operator>
                <name>to</name>
              </expr>
            </argument>)</argument_list>
          </call>
        </expr>;</expr_stmt>
        <return>return 
        <expr>
          <name>to</name>
        </expr>;</return>
      </block_content>}</block>
    </block_content>}</block>
  </function>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>collectGarbage</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <enum>enum 
  <name>ObjectOwnership</name>
  <block>{ 
  <decl>
    <name>CppOwnership</name>
  </decl>, 
  <decl>
    <name>JavaScriptOwnership</name>
  </decl>}</block>;</enum>
  <function_decl>
  <type>
    <specifier>static</specifier>
    <name>void</name>
  </type>
  <name>setObjectOwnership</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>QObject</name>
        <modifier>*</modifier>
      </type>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>ObjectOwnership</name>
      </type>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <specifier>static</specifier>
    <name>ObjectOwnership</name>
  </type>
  <name>objectOwnership</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>QObject</name>
        <modifier>*</modifier>
      </type>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <enum>enum 
  <name>Extension</name>
  <block>{ 
  <decl>
    <name>TranslationExtension</name>
    <init>= 
    <expr>
      <literal type="number">0x1</literal>
    </expr></init>
  </decl>, 
  <decl>
    <name>ConsoleExtension</name>
    <init>= 
    <expr>
      <literal type="number">0x2</literal>
    </expr></init>
  </decl>, 
  <decl>
    <name>GarbageCollectionExtension</name>
    <init>= 
    <expr>
      <literal type="number">0x4</literal>
    </expr></init>
  </decl>, 
  <decl>
    <name>AllExtensions</name>
    <init>= 
    <expr>
      <literal type="number">0xffffffff</literal>
    </expr></init>
  </decl>}</block>;</enum>
  <macro>
    <name>Q_DECLARE_FLAGS</name>
    <argument_list>(
    <argument>Extensions</argument>, 
    <argument>Extension</argument>)</argument_list>
  </macro>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>installExtensions</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>Extensions</name>
      </type>
      <name>extensions</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QJSValue</name>
        <modifier>&amp;</modifier>
      </type>
      <name>object</name>
      <init>= 
      <expr>
        <call>
          <name>QJSValue</name>
          <argument_list>()</argument_list>
        </call>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setInterrupted</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>interrupted</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isInterrupted</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function>
    <type>
      <name>
        <name>QV4</name>
        <operator>::</operator>
        <name>ExecutionEngine</name>
      </name>
      <modifier>*</modifier>
    </type>
    <name>handle</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_v4Engine</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>throwError</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QString</name>
        <modifier>&amp;</modifier>
      </type>
      <name>message</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>throwError</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>
          <name>QJSValue</name>
          <operator>::</operator>
          <name>ErrorType</name>
        </name>
      </type>
      <name>errorType</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QString</name>
        <modifier>&amp;</modifier>
      </type>
      <name>message</name>
      <init>= 
      <expr>
        <call>
          <name>QString</name>
          <argument_list>()</argument_list>
        </call>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>throwError</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QJSValue</name>
        <modifier>&amp;</modifier>
      </type>
      <name>error</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>hasError</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QJSValue</name>
  </type>
  <name>catchError</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QString</name>
  </type>
  <name>uiLanguage</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setUiLanguage</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QString</name>
        <modifier>&amp;</modifier>
      </type>
      <name>language</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <label>
  <name>Q_SIGNALS</name>:</label>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>uiLanguageChanged</name>
  <parameter_list>()</parameter_list>;</function_decl></public>
  <private>private: 
  <function_decl>
  <type>
    <name>QJSPrimitiveValue</name>
  </type>
  <name>createPrimitive</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>QMetaType</name>
      </type>
      <name>type</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>void</name>
        <modifier>*</modifier>
      </type>
      <name>ptr</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QJSManagedValue</name>
  </type>
  <name>createManaged</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>QMetaType</name>
      </type>
      <name>type</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>void</name>
        <modifier>*</modifier>
      </type>
      <name>ptr</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QJSValue</name>
  </type>
  <name>create</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>QMetaType</name>
      </type>
      <name>type</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>void</name>
        <modifier>*</modifier>
      </type>
      <name>ptr</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_QML_REMOVED_SINCE</name>
      <argument_list>(
      <argument>
        <expr>
          <literal type="number">6</literal>
          <operator>,</operator>
          <literal type="number">5</literal>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <function_decl>
  <type>
    <name>QJSValue</name>
  </type>
  <name>create</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>id</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>void</name>
        <modifier>*</modifier>
      </type>
      <name>ptr</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <comment type="line">// only there for BC reasons</comment>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <function_decl>
  <type>
    <specifier>static</specifier>
    <name>bool</name>
  </type>
  <name>convertPrimitive</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QJSPrimitiveValue</name>
        <modifier>&amp;</modifier>
      </type>
      <name>value</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>QMetaType</name>
      </type>
      <name>type</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>void</name>
        <modifier>*</modifier>
      </type>
      <name>ptr</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <specifier>static</specifier>
    <name>bool</name>
  </type>
  <name>convertManaged</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QJSManagedValue</name>
        <modifier>&amp;</modifier>
      </type>
      <name>value</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>type</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>void</name>
        <modifier>*</modifier>
      </type>
      <name>ptr</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <specifier>static</specifier>
    <name>bool</name>
  </type>
  <name>convertManaged</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QJSManagedValue</name>
        <modifier>&amp;</modifier>
      </type>
      <name>value</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>QMetaType</name>
      </type>
      <name>type</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>void</name>
        <modifier>*</modifier>
      </type>
      <name>ptr</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_QML_REMOVED_SINCE</name>
      <argument_list>(
      <argument>
        <expr>
          <literal type="number">6</literal>
          <operator>,</operator>
          <literal type="number">5</literal>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <function_decl>
  <type>
    <specifier>static</specifier>
    <name>bool</name>
  </type>
  <name>convertV2</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QJSValue</name>
        <modifier>&amp;</modifier>
      </type>
      <name>value</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>type</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>void</name>
        <modifier>*</modifier>
      </type>
      <name>ptr</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <comment type="line">// only there for BC reasons</comment>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <function_decl>
  <type>
    <specifier>static</specifier>
    <name>bool</name>
  </type>
  <name>convertV2</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QJSValue</name>
        <modifier>&amp;</modifier>
      </type>
      <name>value</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>QMetaType</name>
      </type>
      <name>metaType</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>void</name>
        <modifier>*</modifier>
      </type>
      <name>ptr</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <specifier>static</specifier>
    <name>bool</name>
  </type>
  <name>convertString</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QString</name>
        <modifier>&amp;</modifier>
      </type>
      <name>string</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>QMetaType</name>
      </type>
      <name>metaType</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>void</name>
        <modifier>*</modifier>
      </type>
      <name>ptr</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>convertVariant</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QVariant</name>
        <modifier>&amp;</modifier>
      </type>
      <name>value</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>QMetaType</name>
      </type>
      <name>metaType</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>void</name>
        <modifier>*</modifier>
      </type>
      <name>ptr</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>convertMetaType</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>QMetaType</name>
      </type>
      <name>fromType</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>void</name>
        <modifier>*</modifier>
      </type>
      <name>from</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>QMetaType</name>
      </type>
      <name>toType</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>void</name>
        <modifier>*</modifier>
      </type>
      <name>to</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QString</name>
  </type>
  <name>convertQObjectToString</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>QObject</name>
        <modifier>*</modifier>
      </type>
      <name>object</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QString</name>
  </type>
  <name>convertDateTimeToString</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QDateTime</name>
        <modifier>&amp;</modifier>
      </type>
      <name>dateTime</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <specifier>static</specifier>
    <name>QDate</name>
  </type>
  <name>convertDateTimeToDate</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QDateTime</name>
        <modifier>&amp;</modifier>
      </type>
      <name>dateTime</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <template>template
  <parameter_list>&lt;
  <parameter>
    <type>
      <name>typename</name>
    </type>
    <name>T</name>
  </parameter>&gt;</parameter_list>
  <friend>friend 
  <function_decl>
  <type>
    <specifier>inline</specifier>
    <name>T</name>
  </type>
  <name>qjsvalue_cast</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QJSValue</name>
        <modifier>&amp;</modifier>
      </type>
    </decl>
  </parameter>)</parameter_list>;</function_decl></friend></template>
  <template>template
  <parameter_list>&lt;
  <parameter>
    <type>
      <name>typename</name>
    </type>
    <name>T</name>
  </parameter>&gt;</parameter_list>
  <friend>friend 
  <function_decl>
  <type>
    <specifier>inline</specifier>
    <name>T</name>
  </type>
  <name>qjsvalue_cast</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QJSManagedValue</name>
        <modifier>&amp;</modifier>
      </type>
    </decl>
  </parameter>)</parameter_list>;</function_decl></friend></template>
  <template>template
  <parameter_list>&lt;
  <parameter>
    <type>
      <name>typename</name>
    </type>
    <name>T</name>
  </parameter>&gt;</parameter_list>
  <friend>friend 
  <function_decl>
  <type>
    <specifier>inline</specifier>
    <name>T</name>
  </type>
  <name>qjsvalue_cast</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QJSPrimitiveValue</name>
        <modifier>&amp;</modifier>
      </type>
    </decl>
  </parameter>)</parameter_list>;</function_decl></friend></template></private>
  <protected>protected: 
  <constructor_decl>
  <name>QJSEngine</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>QJSEnginePrivate</name>
        <modifier>&amp;</modifier>
      </type>
      <name>dd</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>QObject</name>
        <modifier>*</modifier>
      </type>
      <name>parent</name>
      <init>= 
      <expr>
        <literal type="null">nullptr</literal>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl></protected>
  <private>private: 
  <decl_stmt>
  <decl>
    <type>
      <name>
        <name>QV4</name>
        <operator>::</operator>
        <name>ExecutionEngine</name>
      </name>
      <modifier>*</modifier>
    </type>
    <name>m_v4Engine</name>
  </decl>;</decl_stmt>
  <macro>
    <name>Q_DISABLE_COPY</name>
    <argument_list>(
    <argument>QJSEngine</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_PRIVATE</name>
    <argument_list>(
    <argument>QJSEngine</argument>)</argument_list>
  </macro></private>}</block>;</class>
  <macro>
    <name>Q_DECLARE_OPERATORS_FOR_FLAGS</name>
    <argument_list>(
    <argument>QJSEngine::Extensions</argument>)</argument_list>
  </macro>
  <function>
    <template>template
    <parameter_list>&lt;
    <parameter>
      <type>
        <name>typename</name>
      </type>
      <name>T</name>
    </parameter>&gt;</parameter_list></template>
    <type>
      <name>T</name>
    </type>
    <name>qjsvalue_cast</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <specifier>const</specifier>
          <name>QJSValue</name>
          <modifier>&amp;</modifier>
        </type>
        <name>value</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <if_stmt>
        <if>if 
        <condition>(
        <decl_stmt>
        <expr>
          <name>T</name>
          <name>t</name>
        </expr>;</decl_stmt>
        <expr>
          <call>
            <name>
              <name>QJSEngine</name>
              <operator>::</operator>
              <name>convertV2</name>
            </name>
            <argument_list>(
            <argument>
              <expr>
                <name>value</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <call>
                  <name>
                    <name>QMetaType</name>
                    <operator>::</operator>
                    <name>fromType</name>
                    <argument_list type="generic">&lt;
                    <argument>
                      <expr>
                        <name>T</name>
                      </expr>
                    </argument>&gt;</argument_list>
                  </name>
                  <argument_list>()</argument_list>
                </call>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <operator>&amp;</operator>
                <name>t</name>
              </expr>
            </argument>)</argument_list>
          </call>
        </expr>)</condition>
        <block type="pseudo">
          <block_content>
            <return>return 
            <expr>
              <name>t</name>
            </expr>;</return>
          </block_content>
        </block></if>
        <if type="elseif">else if 
        <condition>(
        <expr>
          <call>
            <name>
              <name>value</name>
              <operator>.</operator>
              <name>isVariant</name>
            </name>
            <argument_list>()</argument_list>
          </call>
        </expr>)</condition>
        <block type="pseudo">
          <block_content>
            <return>return 
            <expr>
              <call>
                <name>
                  <name>qvariant_cast</name>
                  <argument_list type="generic">&lt;
                  <argument>
                    <expr>
                      <name>T</name>
                    </expr>
                  </argument>&gt;</argument_list>
                </name>
                <argument_list>(
                <argument>
                  <expr>
                    <call>
                      <name>
                        <name>value</name>
                        <operator>.</operator>
                        <name>toVariant</name>
                      </name>
                      <argument_list>()</argument_list>
                    </call>
                  </expr>
                </argument>)</argument_list>
              </call>
            </expr>;</return>
          </block_content>
        </block></if>
      </if_stmt>
      <return>return 
      <expr>
        <call>
          <name>T</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <template>template
    <parameter_list>&lt;
    <parameter>
      <type>
        <name>typename</name>
      </type>
      <name>T</name>
    </parameter>&gt;</parameter_list></template>
    <type>
      <name>T</name>
    </type>
    <name>qjsvalue_cast</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <specifier>const</specifier>
          <name>QJSManagedValue</name>
          <modifier>&amp;</modifier>
        </type>
        <name>value</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <if_stmt>
        <if>if 
        <condition>(
        <decl_stmt>
        <expr>
          <name>T</name>
          <name>t</name>
        </expr>;</decl_stmt>
        <expr>
          <call>
            <name>
              <name>QJSEngine</name>
              <operator>::</operator>
              <name>convertManaged</name>
            </name>
            <argument_list>(
            <argument>
              <expr>
                <name>value</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <call>
                  <name>
                    <name>QMetaType</name>
                    <operator>::</operator>
                    <name>fromType</name>
                    <argument_list type="generic">&lt;
                    <argument>
                      <expr>
                        <name>T</name>
                      </expr>
                    </argument>&gt;</argument_list>
                  </name>
                  <argument_list>()</argument_list>
                </call>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <operator>&amp;</operator>
                <name>t</name>
              </expr>
            </argument>)</argument_list>
          </call>
        </expr>)</condition>
        <block type="pseudo">
          <block_content>
            <return>return 
            <expr>
              <name>t</name>
            </expr>;</return>
          </block_content>
        </block></if>
      </if_stmt>
      <return>return 
      <expr>
        <call>
          <name>
            <name>qvariant_cast</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>T</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
          <argument_list>(
          <argument>
            <expr>
              <call>
                <name>
                  <name>value</name>
                  <operator>.</operator>
                  <name>toVariant</name>
                </name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <template>template
    <parameter_list>&lt;
    <parameter>
      <type>
        <name>typename</name>
      </type>
      <name>T</name>
    </parameter>&gt;</parameter_list></template>
    <type>
      <name>T</name>
    </type>
    <name>qjsvalue_cast</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <specifier>const</specifier>
          <name>QJSPrimitiveValue</name>
          <modifier>&amp;</modifier>
        </type>
        <name>value</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <if_stmt>
        <if>if 
        <condition>(
        <decl_stmt>
        <expr>
          <name>T</name>
          <name>t</name>
        </expr>;</decl_stmt>
        <expr>
          <call>
            <name>
              <name>QJSEngine</name>
              <operator>::</operator>
              <name>convertPrimitive</name>
            </name>
            <argument_list>(
            <argument>
              <expr>
                <name>value</name>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <call>
                  <name>
                    <name>QMetaType</name>
                    <operator>::</operator>
                    <name>fromType</name>
                    <argument_list type="generic">&lt;
                    <argument>
                      <expr>
                        <name>T</name>
                      </expr>
                    </argument>&gt;</argument_list>
                  </name>
                  <argument_list>()</argument_list>
                </call>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <operator>&amp;</operator>
                <name>t</name>
              </expr>
            </argument>)</argument_list>
          </call>
        </expr>)</condition>
        <block type="pseudo">
          <block_content>
            <return>return 
            <expr>
              <name>t</name>
            </expr>;</return>
          </block_content>
        </block></if>
      </if_stmt>
      <return>return 
      <expr>
        <call>
          <name>
            <name>qvariant_cast</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>T</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
          <argument_list>(
          <argument>
            <expr>
              <call>
                <name>
                  <name>value</name>
                  <operator>.</operator>
                  <name>toVariant</name>
                </name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <template>template 
    <parameter_list>&lt;&gt;</parameter_list></template>
    <type>
      <specifier>inline</specifier>
      <name>QVariant</name>
    </type>
    <name>
      <name>qjsvalue_cast</name>
      <argument_list type="generic">&lt;
      <argument>
        <expr>
          <name>QVariant</name>
        </expr>
      </argument>&gt;</argument_list>
    </name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <specifier>const</specifier>
          <name>QJSValue</name>
          <modifier>&amp;</modifier>
        </type>
        <name>value</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>
            <name>value</name>
            <operator>.</operator>
            <name>toVariant</name>
          </name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <template>template 
    <parameter_list>&lt;&gt;</parameter_list></template>
    <type>
      <specifier>inline</specifier>
      <name>QVariant</name>
    </type>
    <name>
      <name>qjsvalue_cast</name>
      <argument_list type="generic">&lt;
      <argument>
        <expr>
          <name>QVariant</name>
        </expr>
      </argument>&gt;</argument_list>
    </name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <specifier>const</specifier>
          <name>QJSManagedValue</name>
          <modifier>&amp;</modifier>
        </type>
        <name>value</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>
            <name>value</name>
            <operator>.</operator>
            <name>toVariant</name>
          </name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <template>template 
    <parameter_list>&lt;&gt;</parameter_list></template>
    <type>
      <specifier>inline</specifier>
      <name>QVariant</name>
    </type>
    <name>
      <name>qjsvalue_cast</name>
      <argument_list type="generic">&lt;
      <argument>
        <expr>
          <name>QVariant</name>
        </expr>
      </argument>&gt;</argument_list>
    </name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <specifier>const</specifier>
          <name>QJSPrimitiveValue</name>
          <modifier>&amp;</modifier>
        </type>
        <name>value</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>
            <name>value</name>
            <operator>.</operator>
            <name>toVariant</name>
          </name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function_decl>
  <type>
    <name>Q_QML_EXPORT</name>
    <name>QJSEngine</name>
    <modifier>*</modifier>
  </type>
  <name>qjsEngine</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QObject</name>
        <modifier>*</modifier>
      </type>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <expr>
    <name>QT_END_NAMESPACE</name>
  </expr>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="line">// QJSENGINE_H</comment>
</unit>
