<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src"
xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0"
language="C++"
filename="/Users/andrew/opt/Qt/6.5.2/Src/qtbase/src/gui/kernel/qevent.h">

  <comment type="line">// Copyright (C) 2020 The Qt Company
  Ltd.</comment>
  <comment type="line">// SPDX-License-Identifier:
  LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR
  GPL-3.0-only</comment>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>QEVENT_H</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <cpp:macro>
    <name>QEVENT_H</name>
  </cpp:macro></cpp:define>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <literal type="number">0</literal>
  </expr></cpp:if>
  <cpp:pragma>#
  <cpp:directive>pragma</cpp:directive>
  <name>qt_class</name>
  <name>(</name>
  <name>QtEvents</name>
  <name>)</name></cpp:pragma>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QtGui/qtguiglobal.h&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QtCore/qcoreevent.h&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QtCore/qiodevice.h&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QtCore/qlist.h&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QtCore/qnamespace.h&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QtCore/qpointer.h&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QtCore/qstring.h&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QtCore/qurl.h&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QtCore/qvariant.h&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QtGui/qeventpoint.h&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>
  &lt;QtGui/qpointingdevice.h&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QtGui/qregion.h&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QtGui/qwindowdefs.h&gt;</cpp:file></cpp:include>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_CONFIG</name>
      <argument_list>(
      <argument>
        <expr>
          <name>shortcut</name>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <cpp:include># 
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QtGui/qkeysequence.h&gt;</cpp:file></cpp:include>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <class_decl>class 
  <name>tst_QEvent</name>;</class_decl>
  <macro>
    <name>QT_BEGIN_NAMESPACE</name>
  </macro>
  <class_decl>class 
  <name>QFile</name>;</class_decl>
  <class_decl>class 
  <name>QAction</name>;</class_decl>
  <class_decl>class 
  <name>QMouseEvent</name>;</class_decl>
  <class_decl>class 
  <name>QPointerEvent</name>;</class_decl>
  <class_decl>class 
  <name>QScreen</name>;</class_decl>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_CONFIG</name>
      <argument_list>(
      <argument>
        <expr>
          <name>shortcut</name>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <class_decl>class 
  <name>QShortcut</name>;</class_decl>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <class_decl>class 
  <name>QTabletEvent</name>;</class_decl>
  <class_decl>class 
  <name>QTouchEvent</name>;</class_decl>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_CONFIG</name>
      <argument_list>(
      <argument>
        <expr>
          <name>gestures</name>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <class_decl>class 
  <name>QGesture</name>;</class_decl>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QInputEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QInputEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <specifier>explicit</specifier>
  <name>QInputEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>Type</name>
      </type>
      <name>type</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QInputDevice</name>
        <modifier>*</modifier>
      </type>
      <name>m_dev</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>KeyboardModifiers</name>
        </name>
      </type>
      <name>modifiers</name>
      <init>= 
      <expr>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>NoModifier</name>
        </name>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <function>
    <type>
      <specifier>const</specifier>
      <name>QInputDevice</name>
      <modifier>*</modifier>
    </type>
    <name>device</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_dev</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <name>
        <name>QInputDevice</name>
        <operator>::</operator>
        <name>DeviceType</name>
      </name>
    </type>
    <name>deviceType</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <ternary>
          <condition>
          <expr>
            <name>m_dev</name>
          </expr>?</condition>
          <then>
            <expr>
              <call>
                <name>
                  <name>m_dev</name>
                  <operator>-&gt;</operator>
                  <name>type</name>
                </name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </then>
          <else>: 
          <expr>
            <name>
              <name>QInputDevice</name>
              <operator>::</operator>
              <name>DeviceType</name>
              <operator>::</operator>
              <name>Unknown</name>
            </name>
          </expr></else>
        </ternary>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>KeyboardModifiers</name>
      </name>
    </type>
    <name>modifiers</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_modState</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>void</name>
    </type>
    <name>setModifiers</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <name>
            <name>Qt</name>
            <operator>::</operator>
            <name>KeyboardModifiers</name>
          </name>
        </type>
        <name>modifiers</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <expr_stmt>
      <expr>
        <name>m_modState</name>
        <operator>=</operator>
        <name>modifiers</name>
      </expr>;</expr_stmt>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>quint64</name>
    </type>
    <name>timestamp</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_timeStamp</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>virtual</specifier>
      <name>void</name>
    </type>
    <name>setTimestamp</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <name>quint64</name>
        </type>
        <name>timestamp</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <expr_stmt>
      <expr>
        <name>m_timeStamp</name>
        <operator>=</operator>
        <name>timestamp</name>
      </expr>;</expr_stmt>
    </block_content>}</block>
  </function></public>
  <protected>protected: 
  <constructor_decl>
  <name>QInputEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>Type</name>
      </type>
      <name>type</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>PointerEventTag</name>
      </type>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QInputDevice</name>
        <modifier>*</modifier>
      </type>
      <name>dev</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>KeyboardModifiers</name>
        </name>
      </type>
      <name>modifiers</name>
      <init>= 
      <expr>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>NoModifier</name>
        </name>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <constructor_decl>
  <name>QInputEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>Type</name>
      </type>
      <name>type</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>SinglePointEventTag</name>
      </type>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QInputDevice</name>
        <modifier>*</modifier>
      </type>
      <name>dev</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>KeyboardModifiers</name>
        </name>
      </type>
      <name>modifiers</name>
      <init>= 
      <expr>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>NoModifier</name>
        </name>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <decl_stmt>
  <decl>
    <type>
      <specifier>const</specifier>
      <name>QInputDevice</name>
      <modifier>*</modifier>
    </type>
    <name>m_dev</name>
    <init>= 
    <expr>
      <literal type="null">nullptr</literal>
    </expr></init>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>quint64</name>
    </type>
    <name>m_timeStamp</name>
    <init>= 
    <expr>
      <literal type="number">0</literal>
    </expr></init>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>KeyboardModifiers</name>
      </name>
    </type>
    <name>m_modState</name>
    <init>= 
    <expr>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>NoModifier</name>
      </name>
    </expr></init>
  </decl>;</decl_stmt>
  <comment type="line">// fill up to the closest 8-byte aligned
  size: 48</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>quint32</name>
    </type>
    <name>m_reserved</name>
    <init>= 
    <expr>
      <literal type="number">0</literal>
    </expr></init>
  </decl>;</decl_stmt></protected>}</block>;</class>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QPointerEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QInputEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QPointerEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <expr_stmt>
  <expr>
    <specifier>explicit</specifier>
    <macro>
      <name>QPointerEvent</name>
      <argument_list>(
      <argument>Type type</argument>, 
      <argument>const QPointingDevice *dev</argument>, 
      <argument>Qt::KeyboardModifiers modifiers =
      Qt::NoModifier</argument>, 
      <argument>const QList&lt;QEventPoint&gt; &amp;points =
      {}</argument>)</argument_list>
    </macro>
  </expr>;</expr_stmt>
  <function_decl>
  <type>
    <specifier>const</specifier>
    <name>QPointingDevice</name>
    <modifier>*</modifier>
  </type>
  <name>pointingDevice</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function>
    <type>
      <name>
        <name>QPointingDevice</name>
        <operator>::</operator>
        <name>PointerType</name>
      </name>
    </type>
    <name>pointerType</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <ternary>
          <condition>
          <expr>
            <call>
              <name>pointingDevice</name>
              <argument_list>()</argument_list>
            </call>
          </expr>?</condition>
          <then>
            <expr>
              <call>
                <name>pointingDevice</name>
                <argument_list>()</argument_list>
              </call>
              <operator>-&gt;</operator>
              <call>
                <name>pointerType</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </then>
          <else>: 
          <expr>
            <name>
              <name>QPointingDevice</name>
              <operator>::</operator>
              <name>PointerType</name>
              <operator>::</operator>
              <name>Unknown</name>
            </name>
          </expr></else>
        </ternary>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setTimestamp</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>quint64</name>
      </type>
      <name>timestamp</name>
    </decl>
  </parameter>)</parameter_list>
  <specifier>override</specifier>;</function_decl>
  <function>
    <type>
      <name>qsizetype</name>
    </type>
    <name>pointCount</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>
            <name>m_points</name>
            <operator>.</operator>
            <name>size</name>
          </name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function_decl>
  <type>
    <name>QEventPoint</name>
    <modifier>&amp;</modifier>
  </type>
  <name>point</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>qsizetype</name>
      </type>
      <name>i</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function>
    <type>
      <specifier>const</specifier>
      <name>
        <name>QList</name>
        <argument_list type="generic">&lt;
        <argument>
          <expr>
            <name>QEventPoint</name>
          </expr>
        </argument>&gt;</argument_list>
      </name>
      <modifier>&amp;</modifier>
    </type>
    <name>points</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_points</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function_decl>
  <type>
    <name>QEventPoint</name>
    <modifier>*</modifier>
  </type>
  <name>pointById</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>id</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>allPointsGrabbed</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function>
    <type>
      <specifier>virtual</specifier>
      <name>bool</name>
    </type>
    <name>isBeginEvent</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <literal type="boolean">false</literal>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>virtual</specifier>
      <name>bool</name>
    </type>
    <name>isUpdateEvent</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <literal type="boolean">false</literal>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>virtual</specifier>
      <name>bool</name>
    </type>
    <name>isEndEvent</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <literal type="boolean">false</literal>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>allPointsAccepted</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <specifier>virtual</specifier>
    <name>void</name>
  </type>
  <name>setAccepted</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>accepted</name>
    </decl>
  </parameter>)</parameter_list>
  <specifier>override</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QObject</name>
    <modifier>*</modifier>
  </type>
  <name>exclusiveGrabber</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QEventPoint</name>
        <modifier>&amp;</modifier>
      </type>
      <name>point</name>
    </decl>
  </parameter>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setExclusiveGrabber</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QEventPoint</name>
        <modifier>&amp;</modifier>
      </type>
      <name>point</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>QObject</name>
        <modifier>*</modifier>
      </type>
      <name>exclusiveGrabber</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>
      <name>QList</name>
      <argument_list type="generic">&lt;
      <argument>
        <expr>
          <name>
            <name>QPointer</name>
            <argument_list type="generic">&lt;
            <argument>
              <expr>
                <name>QObject</name>
              </expr>
            </argument>&gt;</argument_list>
          </name>
        </expr>
      </argument>&gt;</argument_list>
    </name>
  </type>
  <name>passiveGrabbers</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QEventPoint</name>
        <modifier>&amp;</modifier>
      </type>
      <name>point</name>
    </decl>
  </parameter>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>clearPassiveGrabbers</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QEventPoint</name>
        <modifier>&amp;</modifier>
      </type>
      <name>point</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>addPassiveGrabber</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QEventPoint</name>
        <modifier>&amp;</modifier>
      </type>
      <name>point</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>QObject</name>
        <modifier>*</modifier>
      </type>
      <name>grabber</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>removePassiveGrabber</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QEventPoint</name>
        <modifier>&amp;</modifier>
      </type>
      <name>point</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>QObject</name>
        <modifier>*</modifier>
      </type>
      <name>grabber</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl></public>
  <protected>protected: 
  <constructor_decl>
  <name>QPointerEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>Type</name>
      </type>
      <name>type</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>SinglePointEventTag</name>
      </type>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QInputDevice</name>
        <modifier>*</modifier>
      </type>
      <name>dev</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>KeyboardModifiers</name>
        </name>
      </type>
      <name>modifiers</name>
      <init>= 
      <expr>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>NoModifier</name>
        </name>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <decl_stmt>
  <decl>
    <type>
      <name>
        <name>QList</name>
        <argument_list type="generic">&lt;
        <argument>
          <expr>
            <name>QEventPoint</name>
          </expr>
        </argument>&gt;</argument_list>
      </name>
    </type>
    <name>m_points</name>
  </decl>;</decl_stmt></protected>}</block>;</class>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QSinglePointEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QPointerEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <decl_stmt>
      <decl>
      <type>
        <name>Q_GADGET</name>
      </type>
      <name>Q_PROPERTY</name>
      <argument_list>(
      <argument>
        <expr>
          <name>QObject</name>
          <operator>*</operator>
          <name>exclusivePointGrabber</name>
          <name>READ</name>
          <name>exclusivePointGrabber</name>
          <name>WRITE</name>
          <name>setExclusivePointGrabber</name>
        </expr>
      </argument>)</argument_list>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>
        <expr>
          <name>QSinglePointEvent</name>
        </expr>
      </argument>)</argument_list>public
      <range>: 
      <expr>
        <specifier>inline</specifier>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>MouseButton</name>
        </name>
        <macro>
          <name>button</name>
          <argument_list>()</argument_list>
        </macro>
        <specifier>const</specifier>
        <block>{ 
        <return>return 
        <expr>
          <name>m_button</name>
        </expr>;</return>}</block>
      </expr></range></decl>
    </decl_stmt>
    <function>
      <type>
        <specifier>inline</specifier>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>MouseButtons</name>
        </name>
      </type>
      <name>buttons</name>
      <parameter_list>()</parameter_list>
      <specifier>const</specifier>
      <block>{
      <block_content>
        <return>return 
        <expr>
          <name>m_mouseState</name>
        </expr>;</return>
      </block_content>}</block>
    </function>
    <function>
      <type>
        <specifier>inline</specifier>
        <name>QPointF</name>
      </type>
      <name>position</name>
      <parameter_list>()</parameter_list>
      <specifier>const</specifier>
      <block>{
      <block_content>
        <expr_stmt>
        <expr>
          <call>
            <name>Q_ASSERT</name>
            <argument_list>(
            <argument>
              <expr>
                <operator>!</operator>
                <call>
                  <name>
                    <name>m_points</name>
                    <operator>.</operator>
                    <name>isEmpty</name>
                  </name>
                  <argument_list>()</argument_list>
                </call>
              </expr>
            </argument>)</argument_list>
          </call>
        </expr>;</expr_stmt>
        <return>return 
        <expr>
          <call>
            <name>
              <name>m_points</name>
              <operator>.</operator>
              <name>first</name>
            </name>
            <argument_list>()</argument_list>
          </call>
          <operator>.</operator>
          <call>
            <name>position</name>
            <argument_list>()</argument_list>
          </call>
        </expr>;</return>
      </block_content>}</block>
    </function>
    <function>
      <type>
        <specifier>inline</specifier>
        <name>QPointF</name>
      </type>
      <name>scenePosition</name>
      <parameter_list>()</parameter_list>
      <specifier>const</specifier>
      <block>{
      <block_content>
        <expr_stmt>
        <expr>
          <call>
            <name>Q_ASSERT</name>
            <argument_list>(
            <argument>
              <expr>
                <operator>!</operator>
                <call>
                  <name>
                    <name>m_points</name>
                    <operator>.</operator>
                    <name>isEmpty</name>
                  </name>
                  <argument_list>()</argument_list>
                </call>
              </expr>
            </argument>)</argument_list>
          </call>
        </expr>;</expr_stmt>
        <return>return 
        <expr>
          <call>
            <name>
              <name>m_points</name>
              <operator>.</operator>
              <name>first</name>
            </name>
            <argument_list>()</argument_list>
          </call>
          <operator>.</operator>
          <call>
            <name>scenePosition</name>
            <argument_list>()</argument_list>
          </call>
        </expr>;</return>
      </block_content>}</block>
    </function>
    <function>
      <type>
        <specifier>inline</specifier>
        <name>QPointF</name>
      </type>
      <name>globalPosition</name>
      <parameter_list>()</parameter_list>
      <specifier>const</specifier>
      <block>{
      <block_content>
        <expr_stmt>
        <expr>
          <call>
            <name>Q_ASSERT</name>
            <argument_list>(
            <argument>
              <expr>
                <operator>!</operator>
                <call>
                  <name>
                    <name>m_points</name>
                    <operator>.</operator>
                    <name>isEmpty</name>
                  </name>
                  <argument_list>()</argument_list>
                </call>
              </expr>
            </argument>)</argument_list>
          </call>
        </expr>;</expr_stmt>
        <return>return 
        <expr>
          <call>
            <name>
              <name>m_points</name>
              <operator>.</operator>
              <name>first</name>
            </name>
            <argument_list>()</argument_list>
          </call>
          <operator>.</operator>
          <call>
            <name>globalPosition</name>
            <argument_list>()</argument_list>
          </call>
        </expr>;</return>
      </block_content>}</block>
    </function>
    <function_decl>
    <type>
      <name>bool</name>
    </type>
    <name>isBeginEvent</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <specifier>override</specifier>;</function_decl>
    <function_decl>
    <type>
      <name>bool</name>
    </type>
    <name>isUpdateEvent</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <specifier>override</specifier>;</function_decl>
    <function_decl>
    <type>
      <name>bool</name>
    </type>
    <name>isEndEvent</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <specifier>override</specifier>;</function_decl>
    <function>
      <type>
        <name>QObject</name>
        <modifier>*</modifier>
      </type>
      <name>exclusivePointGrabber</name>
      <parameter_list>()</parameter_list>
      <specifier>const</specifier>
      <block>{
      <block_content>
        <return>return 
        <expr>
          <call>
            <name>
              <name>QPointerEvent</name>
              <operator>::</operator>
              <name>exclusiveGrabber</name>
            </name>
            <argument_list>(
            <argument>
              <expr>
                <call>
                  <name>points</name>
                  <argument_list>()</argument_list>
                </call>
                <operator>.</operator>
                <call>
                  <name>first</name>
                  <argument_list>()</argument_list>
                </call>
              </expr>
            </argument>)</argument_list>
          </call>
        </expr>;</return>
      </block_content>}</block>
    </function>
    <function>
      <type>
        <name>void</name>
      </type>
      <name>setExclusivePointGrabber</name>
      <parameter_list>(
      <parameter>
        <decl>
          <type>
            <name>QObject</name>
            <modifier>*</modifier>
          </type>
          <name>exclusiveGrabber</name>
        </decl>
      </parameter>)</parameter_list>
      <block>{
      <block_content>
        <expr_stmt>
        <expr>
          <call>
            <name>
              <name>QPointerEvent</name>
              <operator>::</operator>
              <name>setExclusiveGrabber</name>
            </name>
            <argument_list>(
            <argument>
              <expr>
                <call>
                  <name>points</name>
                  <argument_list>()</argument_list>
                </call>
                <operator>.</operator>
                <call>
                  <name>first</name>
                  <argument_list>()</argument_list>
                </call>
              </expr>
            </argument>, 
            <argument>
              <expr>
                <name>exclusiveGrabber</name>
              </expr>
            </argument>)</argument_list>
          </call>
        </expr>;</expr_stmt>
      </block_content>}</block>
    </function>
  </private>
  <protected>protected: 
  <friend>friend 
  <class_decl>class 
  <name>
    <operator>::</operator>
    <name>tst_QEvent</name>
  </name>;</class_decl></friend>
  <macro>
    <name>QSinglePointEvent</name>
    <argument_list>(
    <argument>Type type</argument>, 
    <argument>const QPointingDevice *dev</argument>, 
    <argument>const QEventPoint &amp;point</argument>, 
    <argument>Qt::MouseButton button</argument>, 
    <argument>Qt::MouseButtons buttons</argument>, 
    <argument>Qt::KeyboardModifiers modifiers</argument>, 
    <argument>Qt::MouseEventSource
    source</argument>)</argument_list>
  </macro>
  <empty_stmt>;</empty_stmt>
  <macro>
    <name>QSinglePointEvent</name>
    <argument_list>(
    <argument>Type type</argument>, 
    <argument>const QPointingDevice *dev</argument>, 
    <argument>const QPointF &amp;localPos</argument>, 
    <argument>const QPointF &amp;scenePos</argument>, 
    <argument>const QPointF &amp;globalPos</argument>, 
    <argument>Qt::MouseButton button</argument>, 
    <argument>Qt::MouseButtons buttons</argument>, 
    <argument>Qt::KeyboardModifiers modifiers</argument>, 
    <argument>Qt::MouseEventSource source =
    Qt::MouseEventNotSynthesized</argument>)</argument_list>
  </macro>
  <empty_stmt>;</empty_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>MouseButton</name>
      </name>
    </type>
    <name>m_button</name>
    <init>= 
    <expr>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>NoButton</name>
      </name>
    </expr></init>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>MouseButtons</name>
      </name>
    </type>
    <name>m_mouseState</name>
    <init>= 
    <expr>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>NoButton</name>
      </name>
    </expr></init>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>MouseEventSource</name>
      </name>
    </type>
    <name>m_source</name>
  </decl>;</decl_stmt>
  <comment type="block">/* Fill up to the next 8-byte aligned size:
  88 We have 32bits left, use some for QSinglePointEvent subclasses
  so that we don't end up with gaps. */</comment>
  <comment type="line">// split this in two quint16; with a
  quint32, MSVC would 32-bit align it</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>quint16</name>
    </type>
    <name>m_reserved</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>quint16</name>
    </type>
    <name>m_reserved2</name>
    <range>: 
    <expr>
      <literal type="number">11</literal>
    </expr></range>
  </decl>;</decl_stmt>
  <comment type="line">// for QMouseEvent</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>quint16</name>
    </type>
    <name>m_doubleClick</name>
    <range>: 
    <expr>
      <literal type="number">1</literal>
    </expr></range>
  </decl>;</decl_stmt>
  <comment type="line">// for QWheelEvent</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>quint16</name>
    </type>
    <name>m_phase</name>
    <range>: 
    <expr>
      <literal type="number">3</literal>
    </expr></range>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>quint16</name>
    </type>
    <name>m_invertedScrolling</name>
    <range>: 
    <expr>
      <literal type="number">1</literal>
    </expr></range>
  </decl>;</decl_stmt></protected>}</block>;</class>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QEnterEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QSinglePointEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QEnterEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <name>QEnterEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>localPos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>scenePos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>globalPos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointingDevice</name>
        <modifier>*</modifier>
      </type>
      <name>device</name>
      <init>= 
      <expr>
        <call>
          <name>
            <name>QPointingDevice</name>
            <operator>::</operator>
            <name>primaryPointingDevice</name>
          </name>
          <argument_list>()</argument_list>
        </call>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_DEPRECATED_SINCE</name>
      <argument_list>(
      <argument>
        <expr>
          <literal type="number">6</literal>
          <operator>,</operator>
          <literal type="number">0</literal>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>QT_NO_INTEGER_EVENT_COORDINATES</name></cpp:ifndef>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use position()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>QPoint</name>
    </type>
    <name>pos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>position</name>
          <argument_list>()</argument_list>
        </call>
        <operator>.</operator>
        <call>
          <name>toPoint</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use globalPosition()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>QPoint</name>
    </type>
    <name>globalPos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>globalPosition</name>
          <argument_list>()</argument_list>
        </call>
        <operator>.</operator>
        <call>
          <name>toPoint</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use position()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>int</name>
    </type>
    <name>x</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>qRound</name>
          <argument_list>(
          <argument>
            <expr>
              <call>
                <name>position</name>
                <argument_list>()</argument_list>
              </call>
              <operator>.</operator>
              <call>
                <name>x</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use position()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>int</name>
    </type>
    <name>y</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>qRound</name>
          <argument_list>(
          <argument>
            <expr>
              <call>
                <name>position</name>
                <argument_list>()</argument_list>
              </call>
              <operator>.</operator>
              <call>
                <name>y</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use globalPosition()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>int</name>
    </type>
    <name>globalX</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>qRound</name>
          <argument_list>(
          <argument>
            <expr>
              <call>
                <name>globalPosition</name>
                <argument_list>()</argument_list>
              </call>
              <operator>.</operator>
              <call>
                <name>x</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use globalPosition()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>int</name>
    </type>
    <name>globalY</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>qRound</name>
          <argument_list>(
          <argument>
            <expr>
              <call>
                <name>globalPosition</name>
                <argument_list>()</argument_list>
              </call>
              <operator>.</operator>
              <call>
                <name>y</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use position()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <name>QPointF</name>
    </type>
    <name>localPos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>position</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use scenePosition()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <name>QPointF</name>
    </type>
    <name>windowPos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>scenePosition</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use globalPosition()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <name>QPointF</name>
    </type>
    <name>screenPos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>globalPosition</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="line">// QT_DEPRECATED_SINCE(6,
  0)</comment></public>}</block>;</class>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QMouseEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QSinglePointEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QMouseEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_DEPRECATED_SINCE</name>
      <argument_list>(
      <argument>
        <expr>
          <literal type="number">6</literal>
          <operator>,</operator>
          <literal type="number">4</literal>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_4</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use another constructor"</literal>
    </argument>)</argument_list>
  </macro>
  <constructor_decl>
  <name>QMouseEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>Type</name>
      </type>
      <name>type</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>localPos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>MouseButton</name>
        </name>
      </type>
      <name>button</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>MouseButtons</name>
        </name>
      </type>
      <name>buttons</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>KeyboardModifiers</name>
        </name>
      </type>
      <name>modifiers</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointingDevice</name>
        <modifier>*</modifier>
      </type>
      <name>device</name>
      <init>= 
      <expr>
        <call>
          <name>
            <name>QPointingDevice</name>
            <operator>::</operator>
            <name>primaryPointingDevice</name>
          </name>
          <argument_list>()</argument_list>
        </call>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <constructor_decl>
  <name>QMouseEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>Type</name>
      </type>
      <name>type</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>localPos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>globalPos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>MouseButton</name>
        </name>
      </type>
      <name>button</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>MouseButtons</name>
        </name>
      </type>
      <name>buttons</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>KeyboardModifiers</name>
        </name>
      </type>
      <name>modifiers</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointingDevice</name>
        <modifier>*</modifier>
      </type>
      <name>device</name>
      <init>= 
      <expr>
        <call>
          <name>
            <name>QPointingDevice</name>
            <operator>::</operator>
            <name>primaryPointingDevice</name>
          </name>
          <argument_list>()</argument_list>
        </call>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <constructor_decl>
  <name>QMouseEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>Type</name>
      </type>
      <name>type</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>localPos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>scenePos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>globalPos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>MouseButton</name>
        </name>
      </type>
      <name>button</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>MouseButtons</name>
        </name>
      </type>
      <name>buttons</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>KeyboardModifiers</name>
        </name>
      </type>
      <name>modifiers</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointingDevice</name>
        <modifier>*</modifier>
      </type>
      <name>device</name>
      <init>= 
      <expr>
        <call>
          <name>
            <name>QPointingDevice</name>
            <operator>::</operator>
            <name>primaryPointingDevice</name>
          </name>
          <argument_list>()</argument_list>
        </call>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <constructor_decl>
  <name>QMouseEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>Type</name>
      </type>
      <name>type</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>localPos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>scenePos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>globalPos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>MouseButton</name>
        </name>
      </type>
      <name>button</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>MouseButtons</name>
        </name>
      </type>
      <name>buttons</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>KeyboardModifiers</name>
        </name>
      </type>
      <name>modifiers</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>MouseEventSource</name>
        </name>
      </type>
      <name>source</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointingDevice</name>
        <modifier>*</modifier>
      </type>
      <name>device</name>
      <init>= 
      <expr>
        <call>
          <name>
            <name>QPointingDevice</name>
            <operator>::</operator>
            <name>primaryPointingDevice</name>
          </name>
          <argument_list>()</argument_list>
        </call>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>QT_NO_INTEGER_EVENT_COORDINATES</name></cpp:ifndef>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>QPoint</name>
    </type>
    <name>pos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>position</name>
          <argument_list>()</argument_list>
        </call>
        <operator>.</operator>
        <call>
          <name>toPoint</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_DEPRECATED_SINCE</name>
      <argument_list>(
      <argument>
        <expr>
          <literal type="number">6</literal>
          <operator>,</operator>
          <literal type="number">0</literal>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>QT_NO_INTEGER_EVENT_COORDINATES</name></cpp:ifndef>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use globalPosition()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>QPoint</name>
    </type>
    <name>globalPos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>globalPosition</name>
          <argument_list>()</argument_list>
        </call>
        <operator>.</operator>
        <call>
          <name>toPoint</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use position()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>int</name>
    </type>
    <name>x</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>qRound</name>
          <argument_list>(
          <argument>
            <expr>
              <call>
                <name>position</name>
                <argument_list>()</argument_list>
              </call>
              <operator>.</operator>
              <call>
                <name>x</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use position()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>int</name>
    </type>
    <name>y</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>qRound</name>
          <argument_list>(
          <argument>
            <expr>
              <call>
                <name>position</name>
                <argument_list>()</argument_list>
              </call>
              <operator>.</operator>
              <call>
                <name>y</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use globalPosition()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>int</name>
    </type>
    <name>globalX</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>qRound</name>
          <argument_list>(
          <argument>
            <expr>
              <call>
                <name>globalPosition</name>
                <argument_list>()</argument_list>
              </call>
              <operator>.</operator>
              <call>
                <name>x</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use globalPosition()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>int</name>
    </type>
    <name>globalY</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>qRound</name>
          <argument_list>(
          <argument>
            <expr>
              <call>
                <name>globalPosition</name>
                <argument_list>()</argument_list>
              </call>
              <operator>.</operator>
              <call>
                <name>y</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="line">// QT_NO_INTEGER_EVENT_COORDINATES</comment>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use position()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <name>QPointF</name>
    </type>
    <name>localPos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>position</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use scenePosition()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <name>QPointF</name>
    </type>
    <name>windowPos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>scenePosition</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use globalPosition()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <name>QPointF</name>
    </type>
    <name>screenPos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>globalPosition</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="line">// QT_DEPRECATED_SINCE(6, 0)</comment>
  <function_decl>
  <type>
    <name>
      <name>Qt</name>
      <operator>::</operator>
      <name>MouseEventSource</name>
    </name>
  </type>
  <name>source</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>
      <name>Qt</name>
      <operator>::</operator>
      <name>MouseEventFlags</name>
    </name>
  </type>
  <name>flags</name>
  <parameter_list>()</parameter_list>
  <specifier>
  const</specifier>;</function_decl></public>}</block>;</class>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QHoverEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QSinglePointEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QHoverEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <name>QHoverEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>Type</name>
      </type>
      <name>type</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>scenePos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>globalPos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>oldPos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>KeyboardModifiers</name>
        </name>
      </type>
      <name>modifiers</name>
      <init>= 
      <expr>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>NoModifier</name>
        </name>
      </expr></init>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointingDevice</name>
        <modifier>*</modifier>
      </type>
      <name>device</name>
      <init>= 
      <expr>
        <call>
          <name>
            <name>QPointingDevice</name>
            <operator>::</operator>
            <name>primaryPointingDevice</name>
          </name>
          <argument_list>()</argument_list>
        </call>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_DEPRECATED_SINCE</name>
      <argument_list>(
      <argument>
        <expr>
          <literal type="number">6</literal>
          <operator>,</operator>
          <literal type="number">3</literal>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_3</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use the other constructor"</literal>
    </argument>)</argument_list>
  </macro>
  <constructor_decl>
  <name>QHoverEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>Type</name>
      </type>
      <name>type</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>pos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>oldPos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>KeyboardModifiers</name>
        </name>
      </type>
      <name>modifiers</name>
      <init>= 
      <expr>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>NoModifier</name>
        </name>
      </expr></init>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointingDevice</name>
        <modifier>*</modifier>
      </type>
      <name>device</name>
      <init>= 
      <expr>
        <call>
          <name>
            <name>QPointingDevice</name>
            <operator>::</operator>
            <name>primaryPointingDevice</name>
          </name>
          <argument_list>()</argument_list>
        </call>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_DEPRECATED_SINCE</name>
      <argument_list>(
      <argument>
        <expr>
          <literal type="number">6</literal>
          <operator>,</operator>
          <literal type="number">0</literal>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>QT_NO_INTEGER_EVENT_COORDINATES</name></cpp:ifndef>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use position()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>QPoint</name>
    </type>
    <name>pos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>position</name>
          <argument_list>()</argument_list>
        </call>
        <operator>.</operator>
        <call>
          <name>toPoint</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use position()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>QPointF</name>
    </type>
    <name>posF</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>position</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="line">// QT_DEPRECATED_SINCE(6, 0)</comment>
  <function>
    <type>
      <name>bool</name>
    </type>
    <name>isUpdateEvent</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <specifier>override</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <literal type="boolean">true</literal>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <comment type="line">// TODO deprecate when we figure out an
  actual replacement (point history?)</comment>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>QPoint</name>
    </type>
    <name>oldPos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>
            <name>m_oldPos</name>
            <operator>.</operator>
            <name>toPoint</name>
          </name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>QPointF</name>
    </type>
    <name>oldPosF</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_oldPos</name>
      </expr>;</return>
    </block_content>}</block>
  </function></public>
  <protected>protected: 
  <decl_stmt>
  <decl>
    <type>
      <name>QPointF</name>
    </type>
    <name>m_oldPos</name>
  </decl>;</decl_stmt>
  <comment type="line">// TODO
  remove?</comment></protected>}</block>;</class>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_CONFIG</name>
      <argument_list>(
      <argument>
        <expr>
          <name>wheelevent</name>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QWheelEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QSinglePointEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <decl_stmt>
    <decl>
    <type>
      <name>Q_GADGET</name>
    </type>
    <name>Q_PROPERTY</name>
    <argument_list>(
    <argument>
      <expr>
        <specifier>const</specifier>
        <name>QPointingDevice</name>
        <operator>*</operator>
        <name>device</name>
        <name>READ</name>
        <name>pointingDevice</name>
      </expr>
    </argument>)</argument_list>
    <name>Q_PROPERTY</name>
    <argument_list>(
    <argument>
      <expr>
        <name>QPoint</name>
        <name>pixelDelta</name>
        <name>READ</name>
        <name>pixelDelta</name>
      </expr>
    </argument>)</argument_list>
    <name>Q_PROPERTY</name>
    <argument_list>(
    <argument>
      <expr>
        <name>QPoint</name>
        <name>angleDelta</name>
        <name>READ</name>
        <name>angleDelta</name>
      </expr>
    </argument>)</argument_list>
    <name>Q_PROPERTY</name>
    <argument_list>(
    <argument>
      <expr>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>ScrollPhase</name>
        </name>
        <name>phase</name>
        <name>READ</name>
        <name>phase</name>
      </expr>
    </argument>)</argument_list>
    <name>Q_PROPERTY</name>
    <argument_list>(
    <argument>
      <expr>
        <name>bool</name>
        <name>inverted</name>
        <name>READ</name>
        <name>inverted</name>
      </expr>
    </argument>)</argument_list>
    <name>Q_DECL_EVENT_COMMON</name>
    <argument_list>(
    <argument>
      <expr>
        <name>QWheelEvent</name>
      </expr>
    </argument>)</argument_list>public
    <range>: enum 
    <expr>
      <block>{ 
      <expr>
        <name>DefaultDeltasPerStep</name>
        <operator>=</operator>
        <literal type="number">120</literal>
      </expr>}</block>
    </expr></range></decl>;</decl_stmt>
    <constructor_decl>
    <name>QWheelEvent</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <specifier>const</specifier>
          <name>QPointF</name>
          <modifier>&amp;</modifier>
        </type>
        <name>pos</name>
      </decl>
    </parameter>, 
    <parameter>
      <decl>
        <type>
          <specifier>const</specifier>
          <name>QPointF</name>
          <modifier>&amp;</modifier>
        </type>
        <name>globalPos</name>
      </decl>
    </parameter>, 
    <parameter>
      <decl>
        <type>
          <name>QPoint</name>
        </type>
        <name>pixelDelta</name>
      </decl>
    </parameter>, 
    <parameter>
      <decl>
        <type>
          <name>QPoint</name>
        </type>
        <name>angleDelta</name>
      </decl>
    </parameter>, 
    <parameter>
      <decl>
        <type>
          <name>
            <name>Qt</name>
            <operator>::</operator>
            <name>MouseButtons</name>
          </name>
        </type>
        <name>buttons</name>
      </decl>
    </parameter>, 
    <parameter>
      <decl>
        <type>
          <name>
            <name>Qt</name>
            <operator>::</operator>
            <name>KeyboardModifiers</name>
          </name>
        </type>
        <name>modifiers</name>
      </decl>
    </parameter>, 
    <parameter>
      <decl>
        <type>
          <name>
            <name>Qt</name>
            <operator>::</operator>
            <name>ScrollPhase</name>
          </name>
        </type>
        <name>phase</name>
      </decl>
    </parameter>, 
    <parameter>
      <decl>
        <type>
          <name>bool</name>
        </type>
        <name>inverted</name>
      </decl>
    </parameter>, 
    <parameter>
      <decl>
        <type>
          <name>
            <name>Qt</name>
            <operator>::</operator>
            <name>MouseEventSource</name>
          </name>
        </type>
        <name>source</name>
        <init>= 
        <expr>
          <name>
            <name>Qt</name>
            <operator>::</operator>
            <name>MouseEventNotSynthesized</name>
          </name>
        </expr></init>
      </decl>
    </parameter>, 
    <parameter>
      <decl>
        <type>
          <specifier>const</specifier>
          <name>QPointingDevice</name>
          <modifier>*</modifier>
        </type>
        <name>device</name>
        <init>= 
        <expr>
          <call>
            <name>
              <name>QPointingDevice</name>
              <operator>::</operator>
              <name>primaryPointingDevice</name>
            </name>
            <argument_list>()</argument_list>
          </call>
        </expr></init>
      </decl>
    </parameter>)</parameter_list>;</constructor_decl>
    <function>
      <type>
        <specifier>inline</specifier>
        <name>QPoint</name>
      </type>
      <name>pixelDelta</name>
      <parameter_list>()</parameter_list>
      <specifier>const</specifier>
      <block>{
      <block_content>
        <return>return 
        <expr>
          <name>m_pixelDelta</name>
        </expr>;</return>
      </block_content>}</block>
    </function>
    <function>
      <type>
        <specifier>inline</specifier>
        <name>QPoint</name>
      </type>
      <name>angleDelta</name>
      <parameter_list>()</parameter_list>
      <specifier>const</specifier>
      <block>{
      <block_content>
        <return>return 
        <expr>
          <name>m_angleDelta</name>
        </expr>;</return>
      </block_content>}</block>
    </function>
    <function>
      <type>
        <specifier>inline</specifier>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>ScrollPhase</name>
        </name>
      </type>
      <name>phase</name>
      <parameter_list>()</parameter_list>
      <specifier>const</specifier>
      <block>{
      <block_content>
        <return>return 
        <expr>
          <call>
            <name>
              <name>Qt</name>
              <operator>::</operator>
              <name>ScrollPhase</name>
            </name>
            <argument_list>(
            <argument>
              <expr>
                <name>m_phase</name>
              </expr>
            </argument>)</argument_list>
          </call>
        </expr>;</return>
      </block_content>}</block>
    </function>
    <function>
      <type>
        <specifier>inline</specifier>
        <name>bool</name>
      </type>
      <name>inverted</name>
      <parameter_list>()</parameter_list>
      <specifier>const</specifier>
      <block>{
      <block_content>
        <return>return 
        <expr>
          <name>m_invertedScrolling</name>
        </expr>;</return>
      </block_content>}</block>
    </function>
    <function>
      <type>
        <specifier>inline</specifier>
        <name>bool</name>
      </type>
      <name>isInverted</name>
      <parameter_list>()</parameter_list>
      <specifier>const</specifier>
      <block>{
      <block_content>
        <return>return 
        <expr>
          <name>m_invertedScrolling</name>
        </expr>;</return>
      </block_content>}</block>
    </function>
    <function>
      <type>
        <specifier>inline</specifier>
        <name>bool</name>
      </type>
      <name>hasPixelDelta</name>
      <parameter_list>()</parameter_list>
      <specifier>const</specifier>
      <block>{
      <block_content>
        <return>return 
        <expr>
          <operator>!</operator>
          <call>
            <name>
              <name>m_pixelDelta</name>
              <operator>.</operator>
              <name>isNull</name>
            </name>
            <argument_list>()</argument_list>
          </call>
        </expr>;</return>
      </block_content>}</block>
    </function>
    <function_decl>
    <type>
      <name>bool</name>
    </type>
    <name>isBeginEvent</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <specifier>override</specifier>;</function_decl>
    <function_decl>
    <type>
      <name>bool</name>
    </type>
    <name>isUpdateEvent</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <specifier>override</specifier>;</function_decl>
    <function_decl>
    <type>
      <name>bool</name>
    </type>
    <name>isEndEvent</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <specifier>override</specifier>;</function_decl>
    <function>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>MouseEventSource</name>
        </name>
      </type>
      <name>source</name>
      <parameter_list>()</parameter_list>
      <specifier>const</specifier>
      <block>{
      <block_content>
        <return>return 
        <expr>
          <call>
            <name>
              <name>Qt</name>
              <operator>::</operator>
              <name>MouseEventSource</name>
            </name>
            <argument_list>(
            <argument>
              <expr>
                <name>m_source</name>
              </expr>
            </argument>)</argument_list>
          </call>
        </expr>;</return>
      </block_content>}</block>
    </function>
  </private>
  <protected>protected: 
  <decl_stmt>
  <decl>
    <type>
      <name>QPoint</name>
    </type>
    <name>m_pixelDelta</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QPoint</name>
    </type>
    <name>m_angleDelta</name>
  </decl>;</decl_stmt></protected>}</block>;</class>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_CONFIG</name>
      <argument_list>(
      <argument>
        <expr>
          <name>tabletevent</name>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QTabletEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QSinglePointEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QTabletEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <name>QTabletEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>Type</name>
      </type>
      <name>t</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointingDevice</name>
        <modifier>*</modifier>
      </type>
      <name>device</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>pos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>globalPos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>qreal</name>
      </type>
      <name>pressure</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>float</name>
      </type>
      <name>xTilt</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>float</name>
      </type>
      <name>yTilt</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>float</name>
      </type>
      <name>tangentialPressure</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>qreal</name>
      </type>
      <name>rotation</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>float</name>
      </type>
      <name>z</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>KeyboardModifiers</name>
        </name>
      </type>
      <name>keyState</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>MouseButton</name>
        </name>
      </type>
      <name>button</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>MouseButtons</name>
        </name>
      </type>
      <name>buttons</name>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_DEPRECATED_SINCE</name>
      <argument_list>(
      <argument>
        <expr>
          <literal type="number">6</literal>
          <operator>,</operator>
          <literal type="number">0</literal>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use position()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>QPoint</name>
    </type>
    <name>pos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>position</name>
          <argument_list>()</argument_list>
        </call>
        <operator>.</operator>
        <call>
          <name>toPoint</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use globalPosition()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>QPoint</name>
    </type>
    <name>globalPos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>globalPosition</name>
          <argument_list>()</argument_list>
        </call>
        <operator>.</operator>
        <call>
          <name>toPoint</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use position()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <specifier>const</specifier>
      <name>QPointF</name>
    </type>
    <name>posF</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>position</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use globalPosition()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <specifier>const</specifier>
      <name>QPointF</name>
    </type>
    <name>globalPosF</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>globalPosition</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use position().x()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>int</name>
    </type>
    <name>x</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>qRound</name>
          <argument_list>(
          <argument>
            <expr>
              <call>
                <name>position</name>
                <argument_list>()</argument_list>
              </call>
              <operator>.</operator>
              <call>
                <name>x</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use position().y()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>int</name>
    </type>
    <name>y</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>qRound</name>
          <argument_list>(
          <argument>
            <expr>
              <call>
                <name>position</name>
                <argument_list>()</argument_list>
              </call>
              <operator>.</operator>
              <call>
                <name>y</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use globalPosition().x()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>int</name>
    </type>
    <name>globalX</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>qRound</name>
          <argument_list>(
          <argument>
            <expr>
              <call>
                <name>globalPosition</name>
                <argument_list>()</argument_list>
              </call>
              <operator>.</operator>
              <call>
                <name>x</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use globalPosition().y()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>int</name>
    </type>
    <name>globalY</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>qRound</name>
          <argument_list>(
          <argument>
            <expr>
              <call>
                <name>globalPosition</name>
                <argument_list>()</argument_list>
              </call>
              <operator>.</operator>
              <call>
                <name>y</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"use globalPosition().x()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>qreal</name>
    </type>
    <name>hiResGlobalX</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>globalPosition</name>
          <argument_list>()</argument_list>
        </call>
        <operator>.</operator>
        <call>
          <name>x</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"use globalPosition().y()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>qreal</name>
    </type>
    <name>hiResGlobalY</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>globalPosition</name>
          <argument_list>()</argument_list>
        </call>
        <operator>.</operator>
        <call>
          <name>y</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"use
      pointingDevice().uniqueId()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>qint64</name>
    </type>
    <name>uniqueId</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <ternary>
          <condition>
          <expr>
            <call>
              <name>pointingDevice</name>
              <argument_list>()</argument_list>
            </call>
          </expr>?</condition>
          <then>
            <expr>
              <call>
                <name>pointingDevice</name>
                <argument_list>()</argument_list>
              </call>
              <operator>-&gt;</operator>
              <call>
                <name>uniqueId</name>
                <argument_list>()</argument_list>
              </call>
              <operator>.</operator>
              <call>
                <name>numericId</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </then>
          <else>: 
          <expr>
            <operator>-</operator>
            <literal type="number">1</literal>
          </expr></else>
        </ternary>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>qreal</name>
    </type>
    <name>pressure</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <expr_stmt>
      <expr>
        <call>
          <name>Q_ASSERT</name>
          <argument_list>(
          <argument>
            <expr>
              <operator>!</operator>
              <call>
                <name>points</name>
                <argument_list>()</argument_list>
              </call>
              <operator>.</operator>
              <call>
                <name>isEmpty</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</expr_stmt>
      <return>return 
      <expr>
        <call>
          <name>points</name>
          <argument_list>()</argument_list>
        </call>
        <operator>.</operator>
        <call>
          <name>first</name>
          <argument_list>()</argument_list>
        </call>
        <operator>.</operator>
        <call>
          <name>pressure</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>qreal</name>
    </type>
    <name>rotation</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <expr_stmt>
      <expr>
        <call>
          <name>Q_ASSERT</name>
          <argument_list>(
          <argument>
            <expr>
              <operator>!</operator>
              <call>
                <name>points</name>
                <argument_list>()</argument_list>
              </call>
              <operator>.</operator>
              <call>
                <name>isEmpty</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</expr_stmt>
      <return>return 
      <expr>
        <call>
          <name>points</name>
          <argument_list>()</argument_list>
        </call>
        <operator>.</operator>
        <call>
          <name>first</name>
          <argument_list>()</argument_list>
        </call>
        <operator>.</operator>
        <call>
          <name>rotation</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>qreal</name>
    </type>
    <name>z</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_z</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>qreal</name>
    </type>
    <name>tangentialPressure</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_tangential</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>qreal</name>
    </type>
    <name>xTilt</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_xTilt</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>qreal</name>
    </type>
    <name>yTilt</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_yTilt</name>
      </expr>;</return>
    </block_content>}</block>
  </function></public>
  <protected>protected: 
  <decl_stmt>
  <decl>
    <type>
      <name>float</name>
    </type>
    <name>m_tangential</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>float</name>
    </type>
    <name>m_xTilt</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>float</name>
    </type>
    <name>m_yTilt</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>float</name>
    </type>
    <name>m_z</name>
  </decl>;</decl_stmt></protected>}</block>;</class>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="line">// QT_CONFIG(tabletevent)</comment>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_CONFIG</name>
      <argument_list>(
      <argument>
        <expr>
          <name>gestures</name>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QNativeGestureEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QSinglePointEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QNativeGestureEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_DEPRECATED_SINCE</name>
      <argument_list>(
      <argument>
        <expr>
          <literal type="number">6</literal>
          <operator>,</operator>
          <literal type="number">2</literal>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_2</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use the other constructor"</literal>
    </argument>)</argument_list>
  </macro>
  <constructor_decl>
  <name>QNativeGestureEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>NativeGestureType</name>
        </name>
      </type>
      <name>type</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointingDevice</name>
        <modifier>*</modifier>
      </type>
      <name>dev</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>localPos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>scenePos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>globalPos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>qreal</name>
      </type>
      <name>value</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>quint64</name>
      </type>
      <name>sequenceId</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>quint64</name>
      </type>
      <name>intArgument</name>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <constructor_decl>
  <name>QNativeGestureEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>NativeGestureType</name>
        </name>
      </type>
      <name>type</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointingDevice</name>
        <modifier>*</modifier>
      </type>
      <name>dev</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>fingerCount</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>localPos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>scenePos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>globalPos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>qreal</name>
      </type>
      <name>value</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>delta</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>quint64</name>
      </type>
      <name>sequenceId</name>
      <init>= 
      <expr>
        <name>UINT64_MAX</name>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <function>
    <type>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>NativeGestureType</name>
      </name>
    </type>
    <name>gestureType</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_gestureType</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <name>int</name>
    </type>
    <name>fingerCount</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_fingerCount</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <name>qreal</name>
    </type>
    <name>value</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_realValue</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <name>QPointF</name>
    </type>
    <name>delta</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <cpp:if>#
      <cpp:directive>if</cpp:directive>
      <expr>
        <name>QT_VERSION</name>
        <operator>&lt;</operator>
        <call>
          <name>QT_VERSION_CHECK</name>
          <argument_list>(
          <argument>
            <expr>
              <literal type="number">7</literal>
              <operator>,</operator>
              <literal type="number">0</literal>
              <operator>,</operator>
              <literal type="number">0</literal>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr></cpp:if>
      <return>return 
      <expr>
        <call>
          <name>
            <name>m_delta</name>
            <operator>.</operator>
            <name>toPointF</name>
          </name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
      <cpp:else>#
      <cpp:directive>else</cpp:directive></cpp:else>
      <return>return 
      <expr>
        <name>m_delta</name>
      </expr>;</return>
      <cpp:endif>#
      <cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block>
  </function>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_DEPRECATED_SINCE</name>
      <argument_list>(
      <argument>
        <expr>
          <literal type="number">6</literal>
          <operator>,</operator>
          <literal type="number">0</literal>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>QT_NO_INTEGER_EVENT_COORDINATES</name></cpp:ifndef>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use position().toPoint()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <specifier>const</specifier>
      <name>QPoint</name>
    </type>
    <name>pos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>position</name>
          <argument_list>()</argument_list>
        </call>
        <operator>.</operator>
        <call>
          <name>toPoint</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use
      globalPosition().toPoint()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <specifier>const</specifier>
      <name>QPoint</name>
    </type>
    <name>globalPos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>globalPosition</name>
          <argument_list>()</argument_list>
        </call>
        <operator>.</operator>
        <call>
          <name>toPoint</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use position()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <name>QPointF</name>
    </type>
    <name>localPos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>position</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use scenePosition()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <name>QPointF</name>
    </type>
    <name>windowPos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>scenePosition</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use globalPosition()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <name>QPointF</name>
    </type>
    <name>screenPos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>globalPosition</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif></public>
  <protected>protected: 
  <decl_stmt>
  <decl>
    <type>
      <name>quint64</name>
    </type>
    <name>m_sequenceId</name>
  </decl>;</decl_stmt>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <name>QT_VERSION</name>
    <operator>&lt;</operator>
    <call>
      <name>QT_VERSION_CHECK</name>
      <argument_list>(
      <argument>
        <expr>
          <literal type="number">7</literal>
          <operator>,</operator>
          <literal type="number">0</literal>
          <operator>,</operator>
          <literal type="number">0</literal>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <decl_stmt>
  <decl>
    <type>
      <name>QVector2D</name>
    </type>
    <name>m_delta</name>
  </decl>;</decl_stmt>
  <cpp:else>#
  <cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt>
  <decl>
    <type>
      <name>QPointF</name>
    </type>
    <name>m_delta</name>
  </decl>;</decl_stmt>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt>
  <decl>
    <type>
      <name>qreal</name>
    </type>
    <name>m_realValue</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>NativeGestureType</name>
      </name>
    </type>
    <name>m_gestureType</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>quint32</name>
    </type>
    <name>m_fingerCount</name>
    <range>: 
    <expr>
      <literal type="number">4</literal>
    </expr></range>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>quint32</name>
    </type>
    <name>m_reserved</name>
    <range>: 
    <expr>
      <literal type="number">28</literal>
    </expr></range>
  </decl>;</decl_stmt></protected>}</block>;</class>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="line">// QT_CONFIG(gestures)</comment>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QKeyEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QInputEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QKeyEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <name>QKeyEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>Type</name>
      </type>
      <name>type</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>key</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>KeyboardModifiers</name>
        </name>
      </type>
      <name>modifiers</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QString</name>
        <modifier>&amp;</modifier>
      </type>
      <name>text</name>
      <init>= 
      <expr>
        <call>
          <name>QString</name>
          <argument_list>()</argument_list>
        </call>
      </expr></init>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>autorep</name>
      <init>= 
      <expr>
        <literal type="boolean">false</literal>
      </expr></init>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>quint16</name>
      </type>
      <name>count</name>
      <init>= 
      <expr>
        <literal type="number">1</literal>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <constructor_decl>
  <name>QKeyEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>Type</name>
      </type>
      <name>type</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>key</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>KeyboardModifiers</name>
        </name>
      </type>
      <name>modifiers</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>quint32</name>
      </type>
      <name>nativeScanCode</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>quint32</name>
      </type>
      <name>nativeVirtualKey</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>quint32</name>
      </type>
      <name>nativeModifiers</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QString</name>
        <modifier>&amp;</modifier>
      </type>
      <name>text</name>
      <init>= 
      <expr>
        <call>
          <name>QString</name>
          <argument_list>()</argument_list>
        </call>
      </expr></init>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>autorep</name>
      <init>= 
      <expr>
        <literal type="boolean">false</literal>
      </expr></init>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>quint16</name>
      </type>
      <name>count</name>
      <init>= 
      <expr>
        <literal type="number">1</literal>
      </expr></init>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QInputDevice</name>
        <modifier>*</modifier>
      </type>
      <name>device</name>
      <init>= 
      <expr>
        <call>
          <name>
            <name>QInputDevice</name>
            <operator>::</operator>
            <name>primaryKeyboard</name>
          </name>
          <argument_list>()</argument_list>
        </call>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <function>
    <type>
      <name>int</name>
    </type>
    <name>key</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_key</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_CONFIG</name>
      <argument_list>(
      <argument>
        <expr>
          <name>shortcut</name>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>matches</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>
          <name>QKeySequence</name>
          <operator>::</operator>
          <name>StandardKey</name>
        </name>
      </type>
      <name>key</name>
    </decl>
  </parameter>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <function_decl>
  <type>
    <name>
      <name>Qt</name>
      <operator>::</operator>
      <name>KeyboardModifiers</name>
    </name>
  </type>
  <name>modifiers</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function>
    <type>
      <name>QKeyCombination</name>
    </type>
    <name>keyCombination</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>QKeyCombination</name>
          <argument_list>(
          <argument>
            <expr>
              <call>
                <name>modifiers</name>
                <argument_list>()</argument_list>
              </call>
            </expr>
          </argument>, 
          <argument>
            <expr>
              <call>
                <name>
                  <name>Qt</name>
                  <operator>::</operator>
                  <name>Key</name>
                </name>
                <argument_list>(
                <argument>
                  <expr>
                    <name>m_key</name>
                  </expr>
                </argument>)</argument_list>
              </call>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>QString</name>
    </type>
    <name>text</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_text</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>bool</name>
    </type>
    <name>isAutoRepeat</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_autoRepeat</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>int</name>
    </type>
    <name>count</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>int</name>
          <argument_list>(
          <argument>
            <expr>
              <name>m_count</name>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>quint32</name>
    </type>
    <name>nativeScanCode</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_scanCode</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>quint32</name>
    </type>
    <name>nativeVirtualKey</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_virtualKey</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>quint32</name>
    </type>
    <name>nativeModifiers</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_nativeModifiers</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_CONFIG</name>
      <argument_list>(
      <argument>
        <expr>
          <name>shortcut</name>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <friend>friend 
  <function type="operator">
    <type>
      <specifier>inline</specifier>
      <name>bool</name>
    </type>
    <name>operator
    <name>==</name></name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <name>QKeyEvent</name>
          <modifier>*</modifier>
        </type>
        <name>e</name>
      </decl>
    </parameter>, 
    <parameter>
      <decl>
        <type>
          <name>
            <name>QKeySequence</name>
            <operator>::</operator>
            <name>StandardKey</name>
          </name>
        </type>
        <name>key</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <operator>(</operator>
        <ternary>
          <condition>
          <expr>
            <name>e</name>
          </expr>?</condition>
          <then>
            <expr>
              <call>
                <name>
                  <name>e</name>
                  <operator>-&gt;</operator>
                  <name>matches</name>
                </name>
                <argument_list>(
                <argument>
                  <expr>
                    <name>key</name>
                  </expr>
                </argument>)</argument_list>
              </call>
            </expr>
          </then>
          <else>: 
          <expr>
            <literal type="boolean">false</literal>
          </expr></else>
        </ternary>
        <operator>)</operator>
      </expr>;</return>
    </block_content>}</block>
  </function></friend>
  <friend>friend 
  <function type="operator">
    <type>
      <specifier>inline</specifier>
      <name>bool</name>
    </type>
    <name>operator
    <name>==</name></name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <name>
            <name>QKeySequence</name>
            <operator>::</operator>
            <name>StandardKey</name>
          </name>
        </type>
        <name>key</name>
      </decl>
    </parameter>, 
    <parameter>
      <decl>
        <type>
          <name>QKeyEvent</name>
          <modifier>*</modifier>
        </type>
        <name>e</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <operator>(</operator>
        <ternary>
          <condition>
          <expr>
            <name>e</name>
          </expr>?</condition>
          <then>
            <expr>
              <call>
                <name>
                  <name>e</name>
                  <operator>-&gt;</operator>
                  <name>matches</name>
                </name>
                <argument_list>(
                <argument>
                  <expr>
                    <name>key</name>
                  </expr>
                </argument>)</argument_list>
              </call>
            </expr>
          </then>
          <else>: 
          <expr>
            <literal type="boolean">false</literal>
          </expr></else>
        </ternary>
        <operator>)</operator>
      </expr>;</return>
    </block_content>}</block>
  </function></friend>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="line">// QT_CONFIG(shortcut)</comment></public>
  <protected>protected: 
  <decl_stmt>
  <decl>
    <type>
      <name>QString</name>
    </type>
    <name>m_text</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>int</name>
    </type>
    <name>m_key</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>quint32</name>
    </type>
    <name>m_scanCode</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>quint32</name>
    </type>
    <name>m_virtualKey</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>quint32</name>
    </type>
    <name>m_nativeModifiers</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>quint16</name>
    </type>
    <name>m_count</name>
    <range>: 
    <expr>
      <literal type="number">15</literal>
    </expr></range>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>quint16</name>
    </type>
    <name>m_autoRepeat</name>
    <range>: 
    <expr>
      <literal type="number">1</literal>
    </expr></range>
  </decl>;</decl_stmt></protected>}</block>;</class>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QFocusEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QFocusEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <specifier>explicit</specifier>
  <name>QFocusEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>Type</name>
      </type>
      <name>type</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>FocusReason</name>
        </name>
      </type>
      <name>reason</name>
      <init>=
      <expr>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>OtherFocusReason</name>
        </name>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>bool</name>
    </type>
    <name>gotFocus</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>type</name>
          <argument_list>()</argument_list>
        </call>
        <operator>==</operator>
        <name>FocusIn</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>bool</name>
    </type>
    <name>lostFocus</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>type</name>
          <argument_list>()</argument_list>
        </call>
        <operator>==</operator>
        <name>FocusOut</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function_decl>
  <type>
    <name>
      <name>Qt</name>
      <operator>::</operator>
      <name>FocusReason</name>
    </name>
  </type>
  <name>reason</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl></public>
  <private>private: 
  <decl_stmt>
  <decl>
    <type>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>FocusReason</name>
      </name>
    </type>
    <name>m_reason</name>
  </decl>;</decl_stmt></private>}</block>;</class>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QPaintEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QPaintEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <specifier>explicit</specifier>
  <name>QPaintEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QRegion</name>
        <modifier>&amp;</modifier>
      </type>
      <name>paintRegion</name>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <constructor_decl>
  <specifier>explicit</specifier>
  <name>QPaintEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QRect</name>
        <modifier>&amp;</modifier>
      </type>
      <name>paintRect</name>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <function>
    <type>
      <specifier>inline</specifier>
      <specifier>const</specifier>
      <name>QRect</name>
      <modifier>&amp;</modifier>
    </type>
    <name>rect</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_rect</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <specifier>const</specifier>
      <name>QRegion</name>
      <modifier>&amp;</modifier>
    </type>
    <name>region</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_region</name>
      </expr>;</return>
    </block_content>}</block>
  </function></public>
  <protected>protected: 
  <decl_stmt>
  <decl>
    <type>
      <name>QRect</name>
    </type>
    <name>m_rect</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QRegion</name>
    </type>
    <name>m_region</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>bool</name>
    </type>
    <name>m_erased</name>
  </decl>;</decl_stmt></protected>}</block>;</class>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QMoveEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QMoveEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <name>QMoveEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPoint</name>
        <modifier>&amp;</modifier>
      </type>
      <name>pos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPoint</name>
        <modifier>&amp;</modifier>
      </type>
      <name>oldPos</name>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <function>
    <type>
      <specifier>inline</specifier>
      <specifier>const</specifier>
      <name>QPoint</name>
      <modifier>&amp;</modifier>
    </type>
    <name>pos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_pos</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <specifier>const</specifier>
      <name>QPoint</name>
      <modifier>&amp;</modifier>
    </type>
    <name>oldPos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_oldPos</name>
      </expr>;</return>
    </block_content>}</block>
  </function></public>
  <protected>protected: 
  <decl_stmt>
  <decl>
    <type>
      <name>QPoint</name>
    </type>
    <name>m_pos</name>
  </decl>, 
  <decl>
    <type ref="prev" />
    <name>m_oldPos</name>
  </decl>;</decl_stmt>
  <friend>friend 
  <class_decl>class 
  <name>
  QApplication</name>;</class_decl></friend></protected>}</block>;</class>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QExposeEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QExposeEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <specifier>explicit</specifier>
  <name>QExposeEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QRegion</name>
        <modifier>&amp;</modifier>
      </type>
      <name>m_region</name>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_DEPRECATED_SINCE</name>
      <argument_list>(
      <argument>
        <expr>
          <literal type="number">6</literal>
          <operator>,</operator>
          <literal type="number">0</literal>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Handle QPaintEvent instead"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <specifier>const</specifier>
      <name>QRegion</name>
      <modifier>&amp;</modifier>
    </type>
    <name>region</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_region</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif></public>
  <protected>protected: 
  <decl_stmt>
  <decl>
    <type>
      <name>QRegion</name>
    </type>
    <name>m_region</name>
  </decl>;</decl_stmt>
  <friend>friend 
  <class_decl>class 
  <name>
  QWidgetWindow</name>;</class_decl></friend></protected>}</block>;</class>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QPlatformSurfaceEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QPlatformSurfaceEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <enum>enum 
  <name>SurfaceEventType</name>
  <block>{ 
  <decl>
    <name>SurfaceCreated</name>
  </decl>, 
  <decl>
    <name>SurfaceAboutToBeDestroyed</name>
  </decl>}</block>;</enum>
  <constructor_decl>
  <specifier>explicit</specifier>
  <name>QPlatformSurfaceEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>SurfaceEventType</name>
      </type>
      <name>surfaceEventType</name>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>SurfaceEventType</name>
    </type>
    <name>surfaceEventType</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_surfaceEventType</name>
      </expr>;</return>
    </block_content>}</block>
  </function></public>
  <protected>protected: 
  <decl_stmt>
  <decl>
    <type>
      <name>SurfaceEventType</name>
    </type>
    <name>m_surfaceEventType</name>
  </decl>;</decl_stmt></protected>}</block>;</class>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QResizeEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QResizeEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <name>QResizeEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QSize</name>
        <modifier>&amp;</modifier>
      </type>
      <name>size</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QSize</name>
        <modifier>&amp;</modifier>
      </type>
      <name>oldSize</name>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <function>
    <type>
      <specifier>inline</specifier>
      <specifier>const</specifier>
      <name>QSize</name>
      <modifier>&amp;</modifier>
    </type>
    <name>size</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_size</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <specifier>const</specifier>
      <name>QSize</name>
      <modifier>&amp;</modifier>
    </type>
    <name>oldSize</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_oldSize</name>
      </expr>;</return>
    </block_content>}</block>
  </function></public>
  <protected>protected: 
  <decl_stmt>
  <decl>
    <type>
      <name>QSize</name>
    </type>
    <name>m_size</name>
  </decl>, 
  <decl>
    <type ref="prev" />
    <name>m_oldSize</name>
  </decl>;</decl_stmt>
  <friend>friend 
  <class_decl>class 
  <name>
  QApplication</name>;</class_decl></friend></protected>}</block>;</class>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QCloseEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QCloseEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <name>QCloseEvent</name>
  <parameter_list>
  ()</parameter_list>;</constructor_decl></public>}</block>;</class>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QIconDragEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QIconDragEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <name>QIconDragEvent</name>
  <parameter_list>
  ()</parameter_list>;</constructor_decl></public>}</block>;</class>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QShowEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QShowEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <name>QShowEvent</name>
  <parameter_list>
  ()</parameter_list>;</constructor_decl></public>}</block>;</class>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QHideEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QHideEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <name>QHideEvent</name>
  <parameter_list>
  ()</parameter_list>;</constructor_decl></public>}</block>;</class>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>QT_NO_CONTEXTMENU</name></cpp:ifndef>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QContextMenuEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QInputEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QContextMenuEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <enum>enum 
  <name>Reason</name>
  <block>{ 
  <decl>
    <name>Mouse</name>
  </decl>, 
  <decl>
    <name>Keyboard</name>
  </decl>, 
  <decl>
    <name>Other</name>
  </decl>}</block>;</enum>
  <constructor_decl>
  <name>QContextMenuEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>Reason</name>
      </type>
      <name>reason</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPoint</name>
        <modifier>&amp;</modifier>
      </type>
      <name>pos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPoint</name>
        <modifier>&amp;</modifier>
      </type>
      <name>globalPos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>KeyboardModifiers</name>
        </name>
      </type>
      <name>modifiers</name>
      <init>= 
      <expr>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>NoModifier</name>
        </name>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_DEPRECATED_SINCE</name>
      <argument_list>(
      <argument>
        <expr>
          <literal type="number">6</literal>
          <operator>,</operator>
          <literal type="number">4</literal>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_4</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use the other constructor"</literal>
    </argument>)</argument_list>
  </macro>
  <constructor_decl>
  <name>QContextMenuEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>Reason</name>
      </type>
      <name>reason</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPoint</name>
        <modifier>&amp;</modifier>
      </type>
      <name>pos</name>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>int</name>
    </type>
    <name>x</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>
            <name>m_pos</name>
            <operator>.</operator>
            <name>x</name>
          </name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>int</name>
    </type>
    <name>y</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>
            <name>m_pos</name>
            <operator>.</operator>
            <name>y</name>
          </name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>int</name>
    </type>
    <name>globalX</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>
            <name>m_globalPos</name>
            <operator>.</operator>
            <name>x</name>
          </name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>int</name>
    </type>
    <name>globalY</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>
            <name>m_globalPos</name>
            <operator>.</operator>
            <name>y</name>
          </name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <specifier>const</specifier>
      <name>QPoint</name>
      <modifier>&amp;</modifier>
    </type>
    <name>pos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_pos</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <specifier>const</specifier>
      <name>QPoint</name>
      <modifier>&amp;</modifier>
    </type>
    <name>globalPos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_globalPos</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>Reason</name>
    </type>
    <name>reason</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>Reason</name>
          <argument_list>(
          <argument>
            <expr>
              <name>m_reason</name>
            </expr>
          </argument>)</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function></public>
  <protected>protected: 
  <decl_stmt>
  <decl>
    <type>
      <name>QPoint</name>
    </type>
    <name>m_pos</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QPoint</name>
    </type>
    <name>m_globalPos</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>uint</name>
    </type>
    <name>m_reason</name>
    <range>: 
    <expr>
      <literal type="number">8</literal>
    </expr></range>
  </decl>;</decl_stmt></protected>}</block>;</class>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="line">// QT_NO_CONTEXTMENU</comment>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>QT_NO_INPUTMETHOD</name></cpp:ifndef>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QInputMethodEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QInputMethodEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <enum>enum 
  <name>AttributeType</name>
  <block>{ 
  <decl>
    <name>TextFormat</name>
  </decl>, 
  <decl>
    <name>Cursor</name>
  </decl>, 
  <decl>
    <name>Language</name>
  </decl>, 
  <decl>
    <name>Ruby</name>
  </decl>, 
  <decl>
    <name>Selection</name>
  </decl>}</block>;</enum>
  <class>class 
  <name>Attribute</name>
  <block>{
  <private type="default"></private>
  <public>public: 
  <constructor>
    <name>Attribute</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <name>AttributeType</name>
        </type>
        <name>typ</name>
      </decl>
    </parameter>, 
    <parameter>
      <decl>
        <type>
          <name>int</name>
        </type>
        <name>s</name>
      </decl>
    </parameter>, 
    <parameter>
      <decl>
        <type>
          <name>int</name>
        </type>
        <name>l</name>
      </decl>
    </parameter>, 
    <parameter>
      <decl>
        <type>
          <name>QVariant</name>
        </type>
        <name>val</name>
      </decl>
    </parameter>)</parameter_list>
    <member_init_list>: 
    <call>
      <name>type</name>
      <argument_list>(
      <argument>
        <expr>
          <name>typ</name>
        </expr>
      </argument>)</argument_list>
    </call>, 
    <call>
      <name>start</name>
      <argument_list>(
      <argument>
        <expr>
          <name>s</name>
        </expr>
      </argument>)</argument_list>
    </call>, 
    <call>
      <name>length</name>
      <argument_list>(
      <argument>
        <expr>
          <name>l</name>
        </expr>
      </argument>)</argument_list>
    </call>, 
    <call>
      <name>value</name>
      <argument_list>(
      <argument>
        <expr>
          <call>
            <name>
              <name>std</name>
              <operator>::</operator>
              <name>move</name>
            </name>
            <argument_list>(
            <argument>
              <expr>
                <name>val</name>
              </expr>
            </argument>)</argument_list>
          </call>
        </expr>
      </argument>)</argument_list>
    </call></member_init_list>
    <block>{
    <block_content />}</block>
  </constructor>
  <constructor>
    <name>Attribute</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <name>AttributeType</name>
        </type>
        <name>typ</name>
      </decl>
    </parameter>, 
    <parameter>
      <decl>
        <type>
          <name>int</name>
        </type>
        <name>s</name>
      </decl>
    </parameter>, 
    <parameter>
      <decl>
        <type>
          <name>int</name>
        </type>
        <name>l</name>
      </decl>
    </parameter>)</parameter_list>
    <member_init_list>: 
    <call>
      <name>type</name>
      <argument_list>(
      <argument>
        <expr>
          <name>typ</name>
        </expr>
      </argument>)</argument_list>
    </call>, 
    <call>
      <name>start</name>
      <argument_list>(
      <argument>
        <expr>
          <name>s</name>
        </expr>
      </argument>)</argument_list>
    </call>, 
    <call>
      <name>length</name>
      <argument_list>(
      <argument>
        <expr>
          <name>l</name>
        </expr>
      </argument>)</argument_list>
    </call>, 
    <call>
      <name>value</name>
      <argument_list>()</argument_list>
    </call></member_init_list>
    <block>{
    <block_content />}</block>
  </constructor>
  <decl_stmt>
  <decl>
    <type>
      <name>AttributeType</name>
    </type>
    <name>type</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>int</name>
    </type>
    <name>start</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>int</name>
    </type>
    <name>length</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QVariant</name>
    </type>
    <name>value</name>
  </decl>;</decl_stmt></public>}</block>;</class>
  <macro>
    <name>QInputMethodEvent</name>
    <argument_list>()</argument_list>
  </macro>
  <empty_stmt>;</empty_stmt>
  <macro>
    <name>QInputMethodEvent</name>
    <argument_list>(
    <argument>const QString &amp;preeditText</argument>, 
    <argument>const QList&lt;Attribute&gt;
    &amp;attributes</argument>)</argument_list>
  </macro>
  <empty_stmt>;</empty_stmt>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setCommitString</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QString</name>
        <modifier>&amp;</modifier>
      </type>
      <name>commitString</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>replaceFrom</name>
      <init>= 
      <expr>
        <literal type="number">0</literal>
      </expr></init>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>replaceLength</name>
      <init>= 
      <expr>
        <literal type="number">0</literal>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function>
    <type>
      <specifier>inline</specifier>
      <specifier>const</specifier>
      <name>
        <name>QList</name>
        <argument_list type="generic">&lt;
        <argument>
          <expr>
            <name>Attribute</name>
          </expr>
        </argument>&gt;</argument_list>
      </name>
      <modifier>&amp;</modifier>
    </type>
    <name>attributes</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_attributes</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <specifier>const</specifier>
      <name>QString</name>
      <modifier>&amp;</modifier>
    </type>
    <name>preeditString</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_preedit</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <specifier>const</specifier>
      <name>QString</name>
      <modifier>&amp;</modifier>
    </type>
    <name>commitString</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_commit</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>int</name>
    </type>
    <name>replacementStart</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_replacementStart</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>int</name>
    </type>
    <name>replacementLength</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_replacementLength</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <expr_stmt>
    <expr>
      <specifier>inline</specifier>
    </expr>
  </expr_stmt>
  <friend>friend 
  <function type="operator">
    <type>
      <name>bool</name>
    </type>
    <name>operator
    <name>==</name></name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <specifier>const</specifier>
          <name>
            <name>QInputMethodEvent</name>
            <operator>::</operator>
            <name>Attribute</name>
          </name>
          <modifier>&amp;</modifier>
        </type>
        <name>lhs</name>
      </decl>
    </parameter>, 
    <parameter>
      <decl>
        <type>
          <specifier>const</specifier>
          <name>
            <name>QInputMethodEvent</name>
            <operator>::</operator>
            <name>Attribute</name>
          </name>
          <modifier>&amp;</modifier>
        </type>
        <name>rhs</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>
          <name>lhs</name>
          <operator>.</operator>
          <name>type</name>
        </name>
        <operator>==</operator>
        <name>
          <name>rhs</name>
          <operator>.</operator>
          <name>type</name>
        </name>
        <operator>&amp;&amp;</operator>
        <name>
          <name>lhs</name>
          <operator>.</operator>
          <name>start</name>
        </name>
        <operator>==</operator>
        <name>
          <name>rhs</name>
          <operator>.</operator>
          <name>start</name>
        </name>
        <operator>&amp;&amp;</operator>
        <name>
          <name>lhs</name>
          <operator>.</operator>
          <name>length</name>
        </name>
        <operator>==</operator>
        <name>
          <name>rhs</name>
          <operator>.</operator>
          <name>length</name>
        </name>
        <operator>&amp;&amp;</operator>
        <name>
          <name>lhs</name>
          <operator>.</operator>
          <name>value</name>
        </name>
        <operator>==</operator>
        <name>
          <name>rhs</name>
          <operator>.</operator>
          <name>value</name>
        </name>
      </expr>;</return>
    </block_content>}</block>
  </function></friend>
  <expr_stmt>
    <expr>
      <specifier>inline</specifier>
    </expr>
  </expr_stmt>
  <friend>friend 
  <function type="operator">
    <type>
      <name>bool</name>
    </type>
    <name>operator
    <name>!=</name></name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <specifier>const</specifier>
          <name>
            <name>QInputMethodEvent</name>
            <operator>::</operator>
            <name>Attribute</name>
          </name>
          <modifier>&amp;</modifier>
        </type>
        <name>lhs</name>
      </decl>
    </parameter>, 
    <parameter>
      <decl>
        <type>
          <specifier>const</specifier>
          <name>
            <name>QInputMethodEvent</name>
            <operator>::</operator>
            <name>Attribute</name>
          </name>
          <modifier>&amp;</modifier>
        </type>
        <name>rhs</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <operator>!</operator>
        <operator>(</operator>
        <name>lhs</name>
        <operator>==</operator>
        <name>rhs</name>
        <operator>)</operator>
      </expr>;</return>
    </block_content>}</block>
  </function></friend></public>
  <private>private: 
  <decl_stmt>
  <decl>
    <type>
      <name>QString</name>
    </type>
    <name>m_preedit</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QString</name>
    </type>
    <name>m_commit</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>
        <name>QList</name>
        <argument_list type="generic">&lt;
        <argument>
          <expr>
            <name>Attribute</name>
          </expr>
        </argument>&gt;</argument_list>
      </name>
    </type>
    <name>m_attributes</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>int</name>
    </type>
    <name>m_replacementStart</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>int</name>
    </type>
    <name>m_replacementLength</name>
  </decl>;</decl_stmt></private>}</block>;</class>
  <expr_stmt>
  <expr>
    <call>
      <name>Q_DECLARE_TYPEINFO</name>
      <argument_list>(
      <argument>
        <expr>
          <name>
            <name>QInputMethodEvent</name>
            <operator>::</operator>
            <name>Attribute</name>
          </name>
        </expr>
      </argument>, 
      <argument>
        <expr>
          <name>Q_RELOCATABLE_TYPE</name>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr>;</expr_stmt>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QInputMethodQueryEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QInputMethodQueryEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <specifier>explicit</specifier>
  <name>QInputMethodQueryEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>InputMethodQueries</name>
        </name>
      </type>
      <name>queries</name>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <function>
    <type>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>InputMethodQueries</name>
      </name>
    </type>
    <name>queries</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_queries</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setValue</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>InputMethodQuery</name>
        </name>
      </type>
      <name>query</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QVariant</name>
        <modifier>&amp;</modifier>
      </type>
      <name>value</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QVariant</name>
  </type>
  <name>value</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>InputMethodQuery</name>
        </name>
      </type>
      <name>query</name>
    </decl>
  </parameter>)</parameter_list>
  <specifier>const</specifier>;</function_decl></public>
  <private>private: 
  <decl_stmt>
  <decl>
    <type>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>InputMethodQueries</name>
      </name>
    </type>
    <name>m_queries</name>
  </decl>;</decl_stmt>
  <struct>struct 
  <name>QueryPair</name>
  <block>{
  <public type="default">
    <decl_stmt>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>InputMethodQuery</name>
        </name>
      </type>
      <name>query</name>
    </decl>;</decl_stmt>
    <decl_stmt>
    <decl>
      <type>
        <name>QVariant</name>
      </type>
      <name>value</name>
    </decl>;</decl_stmt>
  </public>}</block>;</struct>
  <friend>friend 
  <name>
    <name>QTypeInfo</name>
    <argument_list type="generic">&lt;
    <argument>
      <expr>
        <name>QueryPair</name>
      </expr>
    </argument>&gt;</argument_list>
  </name>;</friend>
  <decl_stmt>
  <decl>
    <type>
      <name>
        <name>QList</name>
        <argument_list type="generic">&lt;
        <argument>
          <expr>
            <name>QueryPair</name>
          </expr>
        </argument>&gt;</argument_list>
      </name>
    </type>
    <name>m_values</name>
  </decl>;</decl_stmt></private>}</block>;</class>
  <expr_stmt>
  <expr>
    <call>
      <name>Q_DECLARE_TYPEINFO</name>
      <argument_list>(
      <argument>
        <expr>
          <name>
            <name>QInputMethodQueryEvent</name>
            <operator>::</operator>
            <name>QueryPair</name>
          </name>
        </expr>
      </argument>, 
      <argument>
        <expr>
          <name>Q_RELOCATABLE_TYPE</name>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr>;</expr_stmt>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="line">// QT_NO_INPUTMETHOD</comment>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_CONFIG</name>
      <argument_list>(
      <argument>
        <expr>
          <name>draganddrop</name>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <class_decl>class 
  <name>QMimeData</name>;</class_decl>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QDropEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QDropEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <name>QDropEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>pos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>DropActions</name>
        </name>
      </type>
      <name>actions</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QMimeData</name>
        <modifier>*</modifier>
      </type>
      <name>data</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>MouseButtons</name>
        </name>
      </type>
      <name>buttons</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>KeyboardModifiers</name>
        </name>
      </type>
      <name>modifiers</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>Type</name>
      </type>
      <name>type</name>
      <init>= 
      <expr>
        <name>Drop</name>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_DEPRECATED_SINCE</name>
      <argument_list>(
      <argument>
        <expr>
          <literal type="number">6</literal>
          <operator>,</operator>
          <literal type="number">0</literal>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use position().toPoint()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>QPoint</name>
    </type>
    <name>pos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>position</name>
          <argument_list>()</argument_list>
        </call>
        <operator>.</operator>
        <call>
          <name>toPoint</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use position()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>QPointF</name>
    </type>
    <name>posF</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>position</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use buttons()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>MouseButtons</name>
      </name>
    </type>
    <name>mouseButtons</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>buttons</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use modifiers()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>KeyboardModifiers</name>
      </name>
    </type>
    <name>keyboardModifiers</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>modifiers</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="line">// QT_DEPRECATED_SINCE(6, 0)</comment>
  <function>
    <type>
      <name>QPointF</name>
    </type>
    <name>position</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_pos</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>MouseButtons</name>
      </name>
    </type>
    <name>buttons</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_mouseState</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>KeyboardModifiers</name>
      </name>
    </type>
    <name>modifiers</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_modState</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>DropActions</name>
      </name>
    </type>
    <name>possibleActions</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_actions</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>DropAction</name>
      </name>
    </type>
    <name>proposedAction</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_defaultAction</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>void</name>
    </type>
    <name>acceptProposedAction</name>
    <parameter_list>()</parameter_list>
    <block>{
    <block_content>
      <expr_stmt>
      <expr>
        <name>m_dropAction</name>
        <operator>=</operator>
        <name>m_defaultAction</name>
      </expr>;</expr_stmt>
      <expr_stmt>
      <expr>
        <call>
          <name>accept</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</expr_stmt>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>DropAction</name>
      </name>
    </type>
    <name>dropAction</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_dropAction</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setDropAction</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>DropAction</name>
        </name>
      </type>
      <name>action</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QObject</name>
    <modifier>*</modifier>
  </type>
  <name>source</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function>
    <type>
      <specifier>inline</specifier>
      <specifier>const</specifier>
      <name>QMimeData</name>
      <modifier>*</modifier>
    </type>
    <name>mimeData</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_data</name>
      </expr>;</return>
    </block_content>}</block>
  </function></public>
  <protected>protected: 
  <friend>friend 
  <class_decl>class 
  <name>QApplication</name>;</class_decl></friend>
  <decl_stmt>
  <decl>
    <type>
      <name>QPointF</name>
    </type>
    <name>m_pos</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>MouseButtons</name>
      </name>
    </type>
    <name>m_mouseState</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>KeyboardModifiers</name>
      </name>
    </type>
    <name>m_modState</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>DropActions</name>
      </name>
    </type>
    <name>m_actions</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>DropAction</name>
      </name>
    </type>
    <name>m_dropAction</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>DropAction</name>
      </name>
    </type>
    <name>m_defaultAction</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <specifier>const</specifier>
      <name>QMimeData</name>
      <modifier>*</modifier>
    </type>
    <name>m_data</name>
  </decl>;</decl_stmt></protected>}</block>;</class>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QDragMoveEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QDropEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QDragMoveEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <name>QDragMoveEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPoint</name>
        <modifier>&amp;</modifier>
      </type>
      <name>pos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>DropActions</name>
        </name>
      </type>
      <name>actions</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QMimeData</name>
        <modifier>*</modifier>
      </type>
      <name>data</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>MouseButtons</name>
        </name>
      </type>
      <name>buttons</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>KeyboardModifiers</name>
        </name>
      </type>
      <name>modifiers</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>Type</name>
      </type>
      <name>type</name>
      <init>= 
      <expr>
        <name>DragMove</name>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>QRect</name>
    </type>
    <name>answerRect</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_rect</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>void</name>
    </type>
    <name>accept</name>
    <parameter_list>()</parameter_list>
    <block>{
    <block_content>
      <expr_stmt>
      <expr>
        <call>
          <name>
            <name>QDropEvent</name>
            <operator>::</operator>
            <name>accept</name>
          </name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</expr_stmt>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>void</name>
    </type>
    <name>ignore</name>
    <parameter_list>()</parameter_list>
    <block>{
    <block_content>
      <expr_stmt>
      <expr>
        <call>
          <name>
            <name>QDropEvent</name>
            <operator>::</operator>
            <name>ignore</name>
          </name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</expr_stmt>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>void</name>
    </type>
    <name>accept</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <specifier>const</specifier>
          <name>QRect</name>
          <modifier>&amp;</modifier>
        </type>
        <name>r</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <expr_stmt>
      <expr>
        <call>
          <name>accept</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</expr_stmt>
      <expr_stmt>
      <expr>
        <name>m_rect</name>
        <operator>=</operator>
        <name>r</name>
      </expr>;</expr_stmt>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>void</name>
    </type>
    <name>ignore</name>
    <parameter_list>(
    <parameter>
      <decl>
        <type>
          <specifier>const</specifier>
          <name>QRect</name>
          <modifier>&amp;</modifier>
        </type>
        <name>r</name>
      </decl>
    </parameter>)</parameter_list>
    <block>{
    <block_content>
      <expr_stmt>
      <expr>
        <call>
          <name>ignore</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</expr_stmt>
      <expr_stmt>
      <expr>
        <name>m_rect</name>
        <operator>=</operator>
        <name>r</name>
      </expr>;</expr_stmt>
    </block_content>}</block>
  </function></public>
  <protected>protected: 
  <decl_stmt>
  <decl>
    <type>
      <name>QRect</name>
    </type>
    <name>m_rect</name>
  </decl>;</decl_stmt></protected>}</block>;</class>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QDragEnterEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QDragMoveEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QDragEnterEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <name>QDragEnterEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPoint</name>
        <modifier>&amp;</modifier>
      </type>
      <name>pos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>DropActions</name>
        </name>
      </type>
      <name>actions</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QMimeData</name>
        <modifier>*</modifier>
      </type>
      <name>data</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>MouseButtons</name>
        </name>
      </type>
      <name>buttons</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>KeyboardModifiers</name>
        </name>
      </type>
      <name>modifiers</name>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl></public>}</block>;</class>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QDragLeaveEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QDragLeaveEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <name>QDragLeaveEvent</name>
  <parameter_list>
  ()</parameter_list>;</constructor_decl></public>}</block>;</class>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="line">// QT_CONFIG(draganddrop)</comment>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QHelpEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QHelpEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <name>QHelpEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>Type</name>
      </type>
      <name>type</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPoint</name>
        <modifier>&amp;</modifier>
      </type>
      <name>pos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPoint</name>
        <modifier>&amp;</modifier>
      </type>
      <name>globalPos</name>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>int</name>
    </type>
    <name>x</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>
            <name>m_pos</name>
            <operator>.</operator>
            <name>x</name>
          </name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>int</name>
    </type>
    <name>y</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>
            <name>m_pos</name>
            <operator>.</operator>
            <name>y</name>
          </name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>int</name>
    </type>
    <name>globalX</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>
            <name>m_globalPos</name>
            <operator>.</operator>
            <name>x</name>
          </name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>int</name>
    </type>
    <name>globalY</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>
            <name>m_globalPos</name>
            <operator>.</operator>
            <name>y</name>
          </name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <specifier>const</specifier>
      <name>QPoint</name>
      <modifier>&amp;</modifier>
    </type>
    <name>pos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_pos</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <specifier>const</specifier>
      <name>QPoint</name>
      <modifier>&amp;</modifier>
    </type>
    <name>globalPos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_globalPos</name>
      </expr>;</return>
    </block_content>}</block>
  </function></public>
  <private>private: 
  <decl_stmt>
  <decl>
    <type>
      <name>QPoint</name>
    </type>
    <name>m_pos</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QPoint</name>
    </type>
    <name>m_globalPos</name>
  </decl>;</decl_stmt></private>}</block>;</class>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>QT_NO_STATUSTIP</name></cpp:ifndef>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QStatusTipEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QStatusTipEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <specifier>explicit</specifier>
  <name>QStatusTipEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QString</name>
        <modifier>&amp;</modifier>
      </type>
      <name>tip</name>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>QString</name>
    </type>
    <name>tip</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_tip</name>
      </expr>;</return>
    </block_content>}</block>
  </function></public>
  <private>private: 
  <decl_stmt>
  <decl>
    <type>
      <name>QString</name>
    </type>
    <name>m_tip</name>
  </decl>;</decl_stmt></private>}</block>;</class>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_CONFIG</name>
      <argument_list>(
      <argument>
        <expr>
          <name>whatsthis</name>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QWhatsThisClickedEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QWhatsThisClickedEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <specifier>explicit</specifier>
  <name>QWhatsThisClickedEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QString</name>
        <modifier>&amp;</modifier>
      </type>
      <name>href</name>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>QString</name>
    </type>
    <name>href</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_href</name>
      </expr>;</return>
    </block_content>}</block>
  </function></public>
  <private>private: 
  <decl_stmt>
  <decl>
    <type>
      <name>QString</name>
    </type>
    <name>m_href</name>
  </decl>;</decl_stmt></private>}</block>;</class>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_CONFIG</name>
      <argument_list>(
      <argument>
        <expr>
          <name>action</name>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QActionEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QActionEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <name>QActionEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>type</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>QAction</name>
        <modifier>*</modifier>
      </type>
      <name>action</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>QAction</name>
        <modifier>*</modifier>
      </type>
      <name>before</name>
      <init>= 
      <expr>
        <literal type="null">nullptr</literal>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>QAction</name>
      <modifier>*</modifier>
    </type>
    <name>action</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_action</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>QAction</name>
      <modifier>*</modifier>
    </type>
    <name>before</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_before</name>
      </expr>;</return>
    </block_content>}</block>
  </function></public>
  <private>private: 
  <decl_stmt>
  <decl>
    <type>
      <name>QAction</name>
      <modifier>*</modifier>
    </type>
    <name>m_action</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QAction</name>
      <modifier>*</modifier>
    </type>
    <name>m_before</name>
  </decl>;</decl_stmt></private>}</block>;</class>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="line">// QT_CONFIG(action)</comment>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QFileOpenEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QFileOpenEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <specifier>explicit</specifier>
  <name>QFileOpenEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QString</name>
        <modifier>&amp;</modifier>
      </type>
      <name>file</name>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <constructor_decl>
  <specifier>explicit</specifier>
  <name>QFileOpenEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QUrl</name>
        <modifier>&amp;</modifier>
      </type>
      <name>url</name>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>QString</name>
    </type>
    <name>file</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_file</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <name>QUrl</name>
    </type>
    <name>url</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_url</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>openFile</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>QFile</name>
        <modifier>&amp;</modifier>
      </type>
      <name>file</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>QIODevice</name>
          <operator>::</operator>
          <name>OpenMode</name>
        </name>
      </type>
      <name>flags</name>
    </decl>
  </parameter>)</parameter_list>
  <specifier>const</specifier>;</function_decl></public>
  <private>private: 
  <decl_stmt>
  <decl>
    <type>
      <name>QString</name>
    </type>
    <name>m_file</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QUrl</name>
    </type>
    <name>m_url</name>
  </decl>;</decl_stmt></private>}</block>;</class>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>QT_NO_TOOLBAR</name></cpp:ifndef>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QToolBarChangeEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QToolBarChangeEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <specifier>explicit</specifier>
  <name>QToolBarChangeEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>t</name>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>bool</name>
    </type>
    <name>toggle</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_toggle</name>
      </expr>;</return>
    </block_content>}</block>
  </function></public>
  <private>private: 
  <decl_stmt>
  <decl>
    <type>
      <name>bool</name>
    </type>
    <name>m_toggle</name>
  </decl>;</decl_stmt></private>}</block>;</class>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_CONFIG</name>
      <argument_list>(
      <argument>
        <expr>
          <name>shortcut</name>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QShortcutEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QShortcutEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <comment type="line">// Note this is publicly deprecated, but
  should remain as internal constructor:</comment>
  <constructor_decl>
  <name>QShortcutEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QKeySequence</name>
        <modifier>&amp;</modifier>
      </type>
      <name>key</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>id</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>ambiguous</name>
      <init>= 
      <expr>
        <literal type="boolean">false</literal>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <constructor_decl>
  <name>QShortcutEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QKeySequence</name>
        <modifier>&amp;</modifier>
      </type>
      <name>key</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QShortcut</name>
        <modifier>*</modifier>
      </type>
      <name>shortcut</name>
      <init>= 
      <expr>
        <literal type="null">nullptr</literal>
      </expr></init>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>ambiguous</name>
      <init>= 
      <expr>
        <literal type="boolean">false</literal>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <function>
    <type>
      <specifier>inline</specifier>
      <specifier>const</specifier>
      <name>QKeySequence</name>
      <modifier>&amp;</modifier>
    </type>
    <name>key</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_sequence</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <comment type="line">// Note this is publicly deprecated, but
  should remain as internal getter:</comment>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>int</name>
    </type>
    <name>shortcutId</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_shortcutId</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>bool</name>
    </type>
    <name>isAmbiguous</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_ambiguous</name>
      </expr>;</return>
    </block_content>}</block>
  </function></public>
  <protected>protected: 
  <decl_stmt>
  <decl>
    <type>
      <name>QKeySequence</name>
    </type>
    <name>m_sequence</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>int</name>
    </type>
    <name>m_shortcutId</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>bool</name>
    </type>
    <name>m_ambiguous</name>
  </decl>;</decl_stmt></protected>}</block>;</class>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QWindowStateChangeEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QWindowStateChangeEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <specifier>explicit</specifier>
  <name>QWindowStateChangeEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>WindowStates</name>
        </name>
      </type>
      <name>oldState</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>isOverride</name>
      <init>= 
      <expr>
        <literal type="boolean">false</literal>
      </expr></init>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>WindowStates</name>
      </name>
    </type>
    <name>oldState</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_oldStates</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isOverride</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl></public>
  <private>private: 
  <decl_stmt>
  <decl>
    <type>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>WindowStates</name>
      </name>
    </type>
    <name>m_oldStates</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>bool</name>
    </type>
    <name>m_override</name>
  </decl>;</decl_stmt></private>}</block>;</class>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>QT_NO_DEBUG_STREAM</name></cpp:ifndef>
  <function_decl type="operator">
  <type>
    <name>Q_GUI_EXPORT</name>
    <name>QDebug</name>
  </type>
  <name>operator
  <name>&lt;&lt;</name></name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>QDebug</name>
      </type>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QEvent</name>
        <modifier>*</modifier>
      </type>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QTouchEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QPointerEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QTouchEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <using>using 
  <name>TouchPoint</name>
  <init>= 
  <type>
    <name>QEventPoint</name>
  </type></init>;</using>
  <comment type="line">// source compat</comment>
  <expr_stmt>
  <expr>
    <specifier>explicit</specifier>
    <macro>
      <name>QTouchEvent</name>
      <argument_list>(
      <argument>QEvent::Type eventType</argument>, 
      <argument>const QPointingDevice *device = 
      <literal type="null">nullptr</literal></argument>, 
      <argument>Qt::KeyboardModifiers modifiers =
      Qt::NoModifier</argument>, 
      <argument>const QList&lt;QEventPoint&gt; &amp;touchPoints =
      {}</argument>)</argument_list>
    </macro>
  </expr>;</expr_stmt>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_DEPRECATED_SINCE</name>
      <argument_list>(
      <argument>
        <expr>
          <literal type="number">6</literal>
          <operator>,</operator>
          <literal type="number">0</literal>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use another constructor"</literal>
    </argument>)</argument_list>
  </macro>
  <expr_stmt>
  <expr>
    <specifier>explicit</specifier>
    <macro>
      <name>QTouchEvent</name>
      <argument_list>(
      <argument>QEvent::Type eventType</argument>, 
      <argument>const QPointingDevice *device</argument>, 
      <argument>Qt::KeyboardModifiers modifiers</argument>, 
      <argument>QEventPoint::States touchPointStates</argument>, 
      <argument>const QList&lt;QEventPoint&gt; &amp;touchPoints =
      {}</argument>)</argument_list>
    </macro>
  </expr>;</expr_stmt>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>QObject</name>
      <modifier>*</modifier>
    </type>
    <name>target</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_target</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <specifier>inline</specifier>
      <name>
        <name>QEventPoint</name>
        <operator>::</operator>
        <name>States</name>
      </name>
    </type>
    <name>touchPointStates</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_touchPointStates</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <cpp:if>#
  <cpp:directive>if</cpp:directive>
  <expr>
    <call>
      <name>QT_DEPRECATED_SINCE</name>
      <argument_list>(
      <argument>
        <expr>
          <literal type="number">6</literal>
          <operator>,</operator>
          <literal type="number">0</literal>
        </expr>
      </argument>)</argument_list>
    </call>
  </expr></cpp:if>
  <macro>
    <name>QT_DEPRECATED_VERSION_X_6_0</name>
    <argument_list>(
    <argument>
      <literal type="string">"Use points()"</literal>
    </argument>)</argument_list>
  </macro>
  <function>
    <type>
      <specifier>const</specifier>
      <name>
        <name>QList</name>
        <argument_list type="generic">&lt;
        <argument>
          <expr>
            <name>QEventPoint</name>
          </expr>
        </argument>&gt;</argument_list>
      </name>
      <modifier>&amp;</modifier>
    </type>
    <name>touchPoints</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <call>
          <name>points</name>
          <argument_list>()</argument_list>
        </call>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isBeginEvent</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>
  <specifier>override</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isUpdateEvent</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>
  <specifier>override</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isEndEvent</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>
  <specifier>override</specifier>;</function_decl></public>
  <protected>protected: 
  <decl_stmt>
  <decl>
    <type>
      <name>QObject</name>
      <modifier>*</modifier>
    </type>
    <name>m_target</name>
    <init>= 
    <expr>
      <literal type="null">nullptr</literal>
    </expr></init>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>
        <name>QEventPoint</name>
        <operator>::</operator>
        <name>States</name>
      </name>
    </type>
    <name>m_touchPointStates</name>
    <init>= 
    <expr>
      <name>
        <name>QEventPoint</name>
        <operator>::</operator>
        <name>State</name>
        <operator>::</operator>
        <name>Unknown</name>
      </name>
    </expr></init>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>quint32</name>
    </type>
    <name>m_reserved</name>
    <range>: 
    <expr>
      <literal type="number">24</literal>
    </expr></range>
  </decl>;</decl_stmt></protected>}</block>;</class>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QScrollPrepareEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QScrollPrepareEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <specifier>explicit</specifier>
  <name>QScrollPrepareEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>startPos</name>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <function>
    <type>
      <name>QPointF</name>
    </type>
    <name>startPos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_startPos</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <name>QSizeF</name>
    </type>
    <name>viewportSize</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_viewportSize</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <name>QRectF</name>
    </type>
    <name>contentPosRange</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_contentPosRange</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <name>QPointF</name>
    </type>
    <name>contentPos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_contentPos</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setViewportSize</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QSizeF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>size</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setContentPosRange</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QRectF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>rect</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setContentPos</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>pos</name>
    </decl>
  </parameter>)</parameter_list>;</function_decl></public>
  <private>private: 
  <decl_stmt>
  <decl>
    <type>
      <name>QRectF</name>
    </type>
    <name>m_contentPosRange</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QSizeF</name>
    </type>
    <name>m_viewportSize</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QPointF</name>
    </type>
    <name>m_startPos</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QPointF</name>
    </type>
    <name>m_contentPos</name>
  </decl>;</decl_stmt></private>}</block>;</class>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QScrollEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>QScrollEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <enum>enum 
  <name>ScrollState</name>
  <block>{ 
  <decl>
    <name>ScrollStarted</name>
  </decl>, 
  <decl>
    <name>ScrollUpdated</name>
  </decl>, 
  <decl>
    <name>ScrollFinished</name>
  </decl>}</block>;</enum>
  <constructor_decl>
  <name>QScrollEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>contentPos</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <specifier>const</specifier>
        <name>QPointF</name>
        <modifier>&amp;</modifier>
      </type>
      <name>overshoot</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>ScrollState</name>
      </type>
      <name>scrollState</name>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <function>
    <type>
      <name>QPointF</name>
    </type>
    <name>contentPos</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_contentPos</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <name>QPointF</name>
    </type>
    <name>overshootDistance</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_overshoot</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <name>ScrollState</name>
    </type>
    <name>scrollState</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_state</name>
      </expr>;</return>
    </block_content>}</block>
  </function></public>
  <private>private: 
  <decl_stmt>
  <decl>
    <type>
      <name>QPointF</name>
    </type>
    <name>m_contentPos</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QPointF</name>
    </type>
    <name>m_overshoot</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>
        <name>QScrollEvent</name>
        <operator>::</operator>
        <name>ScrollState</name>
      </name>
    </type>
    <name>m_state</name>
  </decl>;</decl_stmt></private>}</block>;</class>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QScreenOrientationChangeEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>
      QScreenOrientationChangeEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <name>QScreenOrientationChangeEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>QScreen</name>
        <modifier>*</modifier>
      </type>
      <name>screen</name>
    </decl>
  </parameter>, 
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>ScreenOrientation</name>
        </name>
      </type>
      <name>orientation</name>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <function>
    <type>
      <name>QScreen</name>
      <modifier>*</modifier>
    </type>
    <name>screen</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_screen</name>
      </expr>;</return>
    </block_content>}</block>
  </function>
  <function>
    <type>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>ScreenOrientation</name>
      </name>
    </type>
    <name>orientation</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_orientation</name>
      </expr>;</return>
    </block_content>}</block>
  </function></public>
  <private>private: 
  <decl_stmt>
  <decl>
    <type>
      <name>QScreen</name>
      <modifier>*</modifier>
    </type>
    <name>m_screen</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>ScreenOrientation</name>
      </name>
    </type>
    <name>m_orientation</name>
  </decl>;</decl_stmt></private>}</block>;</class>
  <class>class 
  <macro>
    <name>Q_GUI_EXPORT</name>
  </macro>
  <name>QApplicationStateChangeEvent</name>
  <super_list>: 
  <super>
    <specifier>public</specifier>
    <name>QEvent</name>
  </super></super_list>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECL_EVENT_COMMON</name>
      <argument_list>(
      <argument>
      QApplicationStateChangeEvent</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <specifier>explicit</specifier>
  <name>QApplicationStateChangeEvent</name>
  <parameter_list>(
  <parameter>
    <decl>
      <type>
        <name>
          <name>Qt</name>
          <operator>::</operator>
          <name>ApplicationState</name>
        </name>
      </type>
      <name>state</name>
    </decl>
  </parameter>)</parameter_list>;</constructor_decl>
  <function>
    <type>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>ApplicationState</name>
      </name>
    </type>
    <name>applicationState</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{
    <block_content>
      <return>return 
      <expr>
        <name>m_applicationState</name>
      </expr>;</return>
    </block_content>}</block>
  </function></public>
  <private>private: 
  <decl_stmt>
  <decl>
    <type>
      <name>
        <name>Qt</name>
        <operator>::</operator>
        <name>ApplicationState</name>
      </name>
    </type>
    <name>m_applicationState</name>
  </decl>;</decl_stmt></private>}</block>;</class>
  <expr>
    <name>QT_END_NAMESPACE</name>
  </expr>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="line">// QEVENT_H</comment>
</unit>
